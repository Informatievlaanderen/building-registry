<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gisvl.Framework.Spatial</name>
    </assembly>
    <members>
        <member name="T:Gisvl.Framework.Spatial.CGAlgorithms">
            <summary>
            Specifies and implements various fundamental Computational Geometric algorithms.
            The algorithms supplied in this class are robust for double-precision floating point.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.CGAlgorithms.IsPointInRing(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Test whether a point lies inside a ring.
            The ring may be oriented in either direction.
            If the point lies on the ring boundary the result of this method is unspecified.
            This algorithm does not attempt to first check the point against the envelope
            of the ring.
            </summary>
            <param name="p">Point to check for ring inclusion.</param>
            <param name="ring">Assumed to have first point identical to last point.</param>
            <returns><c>true</c> if p is inside ring.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.CGAlgorithms.IsCounterClockwise(System.Collections.Generic.IList{Gisvl.Framework.Spatial.Coordinate})">
            <summary>
            Computes whether a ring defined by an array of <see cref="T:Gisvl.Framework.Spatial.Coordinate" />s is oriented counter-clockwise.
            The list of points is assumed to have the first and last points equal.
            This will handle coordinate lists which contain repeated points.
            This algorithm is only guaranteed to work with valid rings.
            If the ring is invalid (e.g. self-crosses or touches),
            the computed result may not be correct.
            </summary>>
            <param name="ring">The ring to check for.</param>
            <returns>True if counterclockwise, False if clockwise.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.CGAlgorithms.ComputeOrientation(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Computes the orientation of a point q to the directed line segment p1-p2.
            The orientation of a point relative to a directed line segment indicates
            which way you turn to get to q after travelling from p1 to p2.
            </summary>
            <param name="p1">First point on line segment.</param>
            <param name="p2">Second point on line segment.</param>
            <param name="q">Point to compute orientation for.</param>
            <returns>
            1 if q is counter-clockwise (left) from p1-p2,
            -1 if q is clockwise (right) from p1-p2,
            0 if q is collinear with p1-p2.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.CGAlgorithms.SignedArea(Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Computes the signed area for a ring. Based on the Shoelace formula.
            http://en.wikipedia.org/wiki/Shoelace_formula
            </summary>
            <param name="ring">The coordinates of the ring</param>
            <returns>The signed area of the ring, negative for a CCW ring, positive for a CW ring</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.RobustDeterminant">
            <summary>
            Implements an algorithm to compute the sign of a 2x2 determinant for double precision values robustly.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.RobustDeterminant.SignOfDet2x2(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements an algorithm to compute the sign of a 2x2 determinant for double precision values robustly.
            </summary>
            <param name="x1">Value x for point 1</param>
            <param name="y1">Value y for point 1</param>
            <param name="x2">Value x for point 2</param>
            <param name="y2">Value y for point 2</param>
            <returns>
            returns -1 if the determinant is negative,
            returns  1 if the determinant is positive,
            returns  0 if the determinant is null.
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Converter">
            <summary>
            Provides methods to convert coordinates from one projection to another.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.Lambert72ToWgs84(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Converts a Lambert 72 <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> to a WGS 84 <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/>.
            </summary>
            <param name="location">A location in Lambert 72.</param>
            <returns>A location in WGS 84.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.Wgs84ToLambert72(Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Converts a a WGS 84 <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> to a Lambert 72 <see cref="T:Gisvl.Framework.Spatial.Coordinate"/>.
            </summary>
            <param name="location">A location in WGS 84.</param>
            <returns>A location in Lambert 72.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.Wgs84ToWebMercator(Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Converts a WGS 84 <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> to a WebMercator (EPSG 3857) <see cref="T:Gisvl.Framework.Spatial.Coordinate"/>.
            </summary>
            <param name="location">A location in WGS 84.</param>
            <returns>A location in WebMercator (EPSG 3857).</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.WebMercatorToWgs84(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Converts a WebMercator (EPSG 3857) <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> to a WGS 84 <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/>.
            </summary>
            <param name="location">A location in WebMercator (EPSG 3857).</param>
            <returns>A location in WGS 84.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeoCoordinate(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Srid,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> to a <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/>.
            </summary>
            <param name="location">A source location to convert.</param>
            <param name="sourceSrid">The source spatial-reference ID.</param>
            <param name="destinationSrid">The destination spatial-reference ID.</param>
            <returns>A converted location.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeoCoordinateArray(Gisvl.Framework.Spatial.Coordinate[],Gisvl.Framework.Spatial.Srid,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> array to a <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> array.
            </summary>
            <param name="source">An array of source coordinates to convert.</param>
            <param name="sourceSrid">The spatial-reference ID of the source coordinates.</param>
            <param name="destinationSrid">The spatial-reference ID to convert to.</param>
            <returns>An array of converted geocoordinates.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToCoordinate(Gisvl.Framework.Spatial.GeoCoordinate,Gisvl.Framework.Spatial.Srid,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> to a <see cref="T:Gisvl.Framework.Spatial.Coordinate"/>.
            </summary>
            <param name="location">A source location to convert.</param>
            <param name="sourceSrid">The source spatial-reference ID.</param>
            <param name="destinationSrid">The destination spatial-reference ID.</param>
            <returns>A converted location.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToCoordinateArray(Gisvl.Framework.Spatial.GeoCoordinate[],Gisvl.Framework.Spatial.Srid,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> array to a <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> array.
            </summary>
            <param name="source">An array of source geocoordinates to convert.</param>
            <param name="sourceSrid">The spatial-reference ID of the source geocoordinates.</param>
            <param name="destinationSrid">The spatial-reference ID to convert to.</param>
            <returns>An array of converted coordinates.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeography(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Converts a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> to a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> in WGS 84.
            </summary>
            <param name="geometry">The geometry to convert.</param>
            <returns>The converted geography.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeography(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> to a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> in a specified spatial-reference ID.
            </summary>
            <param name="geometry">The geometry to convert.</param>
            <param name="srid">The spatial-reference ID to convert to.</param>
            <returns>The converted geography.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeometry(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Converts a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> to a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> in Lambert 72.
            </summary>
            <param name="geography">The geography to convert.</param>
            <returns>The converted geometry.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Converter.ToGeometry(Microsoft.SqlServer.Types.SqlGeography,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Converts a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> to a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> in a specified spatial-reference ID.
            </summary>
            <param name="geography">The geography to convert.</param>
            <param name="srid">The spatial-reference ID to convert to.</param>
            <returns>The converted geometry.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Densifier">
            <summary>
            Provides methods to densify a path described as a sequence of coordinates.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Densifier.DensifyCoordinates(System.Collections.Generic.List{Gisvl.Framework.Spatial.Coordinate},System.Int32)">
            <summary>
            Densifies a path to <paramref name="sampleCount"/> samples.
            </summary>
            <param name="coordinates">The path to densify.</param>
            <param name="sampleCount">The number of samples requested.</param>
            <returns>A densified path with <paramref name="sampleCount"/> samples.</returns>
            <remarks>
            <para>
            The first and last point in the path will be reflected as samples, other points may or may not be.
            </para>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Densifier.DensifyGeoCoordinates(System.Collections.Generic.List{Gisvl.Framework.Spatial.GeoCoordinate},System.Int32)">
            <summary>
            Densifies a path to <paramref name="sampleCount"/> samples.
            </summary>
            <param name="coordinates">The path to densify.</param>
            <param name="sampleCount">The number of samples requested.</param>
            <returns>A densified path with <paramref name="sampleCount"/> samples.</returns>
            <remarks>
            <para>
            The first and last point in the path will be reflected as samples, other points may or may not be.
            </para>
            </remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions">
            <summary>
            Provides extension methods on IEnumerable&lt;Feature&gt;.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.Index(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Indexes the specified source with a spatial index.
            </summary>
            <param name="source">The source.</param>
            <returns>An indexed feature collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.WhereIntersects(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Filters a sequence of features based on whether they intersect with the provided geometry.
            </summary>
            <param name="source">The source.</param>
            <param name="geometry">The geometry.</param>
            <returns>A sequence of features intersecting the provided <paramref name="geometry"/>.</returns>
            <remarks>
            This method is optimized for large sequences of relatively small features, matched against large or complex geometries. 
            There can be a minor difference in the result, compared to the original and slow method from SqlServer.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> or <paramref name="geometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.ClipWhereIntersects(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Filters a sequence of features based on whether they intersect with the provided geometry and returns the clipped intersection of the geometries.
            </summary>
            <param name="source">The source.</param>
            <param name="geometry">The geometry.</param>
            <returns>A sequence of clipped features intersecting the provided <paramref name="geometry"/>.</returns>
            <remarks>
            This method is optimized for large sequences of relatively small features, matched against large or complex geometries.
            There can be a minor difference in the result, compared to the original and slow method from SqlServer.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> or <paramref name="geometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.WhereInside(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Filters a sequence of features based on whether they are contained within the provided geometry.
            </summary>
            <param name="source">The source.</param>
            <param name="geometry">The geometry.</param>
            <returns>
            <returns>A sequence of features inside the provided <paramref name="geometry"/>.</returns>
            </returns>
            <remarks>
            This method is optimized for large sequences of relatively small features, matched against large or complex geometries.
            There can be a minor difference in the result, compared to the original and slow method from SqlServer.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> or <paramref name="geometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.Round(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.Int32)">
            <summary>
            Rounds the features in the specified <paramref name="source" /> to the specified number of <paramref name="decimals" />.
            </summary>
            <param name="source">The source.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>
            A sequence of features with rounded geometries.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="decimals"/> is less than 0 ro greater than 15.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> is <c>null</c>.</exception>
            <remarks>
            Rounding is performed using <see cref="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.Round(Microsoft.SqlServer.Types.SqlGeometry,System.Int32)" />.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.Transform(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.Func{Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate})">
            <summary>
            Transforms the features in the specified <paramref name="source"/> using the specified <paramref name="transformation"/>.
            </summary>
            <param name="source">The source feature sequence.</param>
            <param name="transformation">The coordinate transformation to apply to the features.</param>
            <returns>A sequence of transformed features.</returns>
            <example>
            The code below eliminates Z and M values from all features in a sequence.
            <code language="cs">sequence = sequence.Transform(coordinate => new Coordinate(coordinate.X, coordinate.Y));</code>
            </example>
            <remarks>
            Original features are not modified, new features with different geometries but the same attributes are returned.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> or <paramref name="transformation"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.RenameAttribute(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.String,System.String)">
            <summary>
            Renames attributes from the features in the specified <paramref name="source"/>.
            </summary>
            <param name="source">The source feature sequence.</param>
            <param name="oldName">The old attribute name.</param>
            <param name="newName">The new attribute name.</param>
            <returns>A sequence of features with renamed attributes.</returns>
            <remarks>
            <para>Original features are not modified, new features with the same geometries but renamed attributes are returned.</para>
            <para>If renaming an attribute results in multiple attributes with the same name, an <see cref="T:System.ArgumentException"/> is thrown when iterating over the sequence.</para>
            </remarks>
            <example>
            The code below renames two attributes with long names to enable writing them into a shape file.
            <code language="cs">sequence = sequence.RenameAttribute("Straatnaam", "Straat").RenameAttribute("StraatnaamId", "StraatId");</code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> or <paramref name="oldName"/> is <c>null</c> or <paramref name="newName"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Feature">
            <summary>
            Represents a geometric feature, i.e. the combination of a geometry with a set of attributes.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="F:Gisvl.Framework.Spatial.Feature.ObjectConverters">
            <summary>
            Stores the cache for object converters
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Feature.geometry">
            <summary>
            The geometry of the feature.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Feature.attributes">
            <summary>
            The attributes of the feature.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Feature.extent">
            <summary>
            The spatial extent of the feature.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Feature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Feature"/> class.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Feature.#ctor(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Feature"/> class with the provided geometry and attributes.
            </summary>
            <param name="geometry">The geometry.</param>
            <remarks>
            Null geometries are stored as <c>null</c>.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Feature.#ctor(Microsoft.SqlServer.Types.SqlGeometry,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Feature"/> class with the provided geometry and attributes.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="attributes">The attributes.</param>
            <example>
            <code language="cs">
            Feature f = new Feature(geometry, new SortedList&lt;string, object&gt;() { { "A", 'a' }, { "B", 'b' } });
            </code>
            </example>
            <exception cref="T:System.ArgumentException">The <paramref name="attributes"/> collection contains an attribute with a <c>null</c> name, or two attributes have the same name.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Feature.#ctor(Microsoft.SqlServer.Types.SqlGeometry,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Feature"/> class.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="attributes">The attributes.</param>
            <remarks>
            The values of public the properties of <paramref name="attributes"/> are added to the <see cref="P:Gisvl.Framework.Spatial.Feature.Attributes"/> collections, using the name of the property as the name of the attribute.
            </remarks>
            <example>
            <code language="cs">
            Feature f = new Feature(geometry, new { A = 'a', B = 'b' });
            </code>
            </example>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Feature.Geometry">
            <summary>
            Gets the geometry representation of the feature.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Feature.Attributes">
            <summary>
            Gets the attributes row of the feature.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Feature.Extent">
            <summary>
            Gets the spatial extent of the feature.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Feature.EnsureMinimalAttributeCapacity(System.Int32)">
            <summary>
            Ensures that capacity of the attributes dictionary is at least <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.FeatureCollection">
             <summary>
             Represents a read only collection of features with a spatial index on them.
             </summary>
             <remarks>
             Create a <see cref="T:Gisvl.Framework.Spatial.FeatureCollection"/> using <see cref="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.Index(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})"/>.
             </remarks>
             <seealso cref="T:Gisvl.Framework.Spatial.Feature"/>
             <seealso cref="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.Index(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})"/>
             <example>
             <code language ="cs">
             List&lt;Feature&gt; features = FeatureLoader.FromShape(System.IO.Path.Combine(inputMap, inFeatureClass)).ToList();
            
             FeatureCollection indexedFeatures = features.Index();
            
             foreach (var feature in features)
             {
                 var intersectingFeatures = indexedFeatures.WhereIntersects(feature.Geometry).Index();
            
                 Console.WriteLine("selected {0} features out of {1}", intersectingFeatures.Count, features.Count);
             }
             </code>
             </example>
        </member>
        <member name="F:Gisvl.Framework.Spatial.FeatureCollection.spatialIndex">
            <summary>
            Stores the spatial index for the features in this collection.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.#ctor(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.FeatureCollection"/> class.
            </summary>
            <param name="features">The features to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="features"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="features"/> contains a least one null feature, or a feature without a geometry,
              or at least two features with different spatial reference identifiers.
            </exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.FeatureCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.FeatureCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the feature collection is read-only.
            </summary>
            <returns><c>true</c> if read-only.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.FeatureCollection.Extent">
            <summary>
            Gets the extent of all the features in this collection.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.FeatureCollection.Srid">
            <summary>
            Gets the spatial-reference id of the features in this collection.
            </summary>
            <value>
            The spatial-reference id of the features in this collection, or <c>-1</c> if this collection is empty.
            </value>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of features.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.WhereExtentIntersects(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Gets the features whose extent intersects the provided <paramref name="bounds"/>.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns>The the features whose extent intersects the provided bounds.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.WhereInside(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Gets the features inside the provided <paramref name="bounds"/>.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns>The features inside the provided bounds.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.Contains(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:Gisvl.Framework.Spatial.Feature"/> feature.
            </summary>
            <param name="item">The feature to locate in the collection.</param>
            <returns>
            <c>true</c> if item is found in the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureCollection.GetFeaturesMatching(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the features whose geometry is the provided geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>The the features whose geometry is the provided geometry.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.FeatureLoader">
             <summary>
             Provides methods to load features in memory from different sources (from Shapefiles, DBase files, DXF files or SQL connections), and extension methods on feature collections.
             </summary>
             <example>
             <code language = "cs">
              var coordinates = from feature in FeatureLoader.FromShape(System.IO.Path.Combine(inputMap, inFeatureClass))
                                from coordinate in feature.Geometry.ToCoordinates()
                                select coordinate;
            
              coordinates = coordinates.ToList();
             </code>
             </example>
             <example>
             <code language="cs">
             using (var connection = new SqlConnection(connectionString))
             {
                 connection.Open();
            
                 using (var command = connection.CreateCommand())
                 {
                     command.CommandText = "SELECT SHAPE, IDN, TPC FROM dbo.gbg WHERE IDN = @idn";
            
                     command.Parameters.Add(new SqlParameter("@idn", idn));
            
                     using (var reader = command.ExecuteReader())
                     {
                         var feature = FeatureLoader.FromDbDataReader(reader).SingleOrDefault();
            
                         if (feature != null)
                         {
                             Console.WriteLine(feature.Geometry.ToString());
                             Console.WriteLine(feature.Attributes["TPC"]);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromShape(System.IO.Stream,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Loads a sequence of features from a shape stream.
            </summary>
            <param name="stream">The .shp stream to read from.</param>
            <param name="srid">The spatial-reference ID, or 0 to use Belgian Lambert 72 (31370).</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
            <exception cref="T:System.FormatException">The stream is not a valid shape stream.</exception>
            <exception cref="T:System.NotSupportedException">Shape file format version is not supported.</exception>
            <exception cref="T:System.IO.IOException">An IO error occured.</exception>
            <remarks>
              <para>
            The stream will be consumed, i.e. read to the end, when enumerated. If the stream supports seeking, the calling code can
            seek to the beginning of the stream to enable reading it again.
              </para>
              <para>
            Enumerating the stream will not <see cref="M:System.IO.Stream.Dispose" /> it. The calling code that created the stream must also dispose it.
              </para>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromShape(System.String,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Loads features from a shape file.
            </summary>
            <param name="shapeFilePath">Name of the file, with or without any extension.</param>
            <param name="srid">The spatial-reference ID, or 0 to use Belgian Lambert 72 (31370).</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="shapeFilePath"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException">The file is not a valid shape file.</exception>
            <exception cref="T:System.NotSupportedException">Shape file format version is not supported.</exception>
            <exception cref="T:System.IO.IOException">An IO error occured.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDBase(System.String)">
            <summary>
            Loads features from a DBase file, without geometry.
            </summary>
            <param name="dBaseFilePath">Name of the file, with or without any extension.</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dBaseFilePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDBaseCore(System.String)">
            <summary>
            Implements the lazy part of <see cref="M:Gisvl.Framework.Spatial.FeatureLoader.FromDBase(System.String)"/>
            </summary>
            <param name="dBaseFilePath">Name of the file, with or without any extension.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDbDataReader(System.Data.Common.DbDataReader)">
            <summary>
            Loads features from a db data reader, assuming the first column is an instance of SqlGeometry from Microsoft.SqlServer.Types.dll
            </summary>
            <param name="reader">The reader.</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="reader"/> is closed or contains no columns.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDxf(System.IO.Stream,System.String)">
            <summary>
            Loads features from an AutoCAD DXF stream (R10, R11, R12, R13, R14, 2000, 2004, 2007, 2010).
            </summary>
            <param name="stream">The stream.</param>
            <param name="layer">The DXF layer, or <c>null</c> to read from all layers.</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <remarks>
            The following entities are returned: points, lwpolylines, polylines, lines, circles, arcs, ellipses, texts and inserts. 
            Closed entities are treated as SqlGeometry polygons, otherwise as SqlGeometry linestrings. 
            Since SqlGeometry can not handle circles, arcs and ellipses, they are approached with a precision of 128 line segments for a full circle. 
            For texts, features (points) will be returned having the text value stored in an attribute "dxfText". 
            For inserts, features (points) will be returned having the insert block name stored in an attribute "dxfBlock". 
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDxf(System.String,System.String)">
            <summary>
            Loads features from an AutoCAD DXF file (R10, R11, R12, R13, R14, 2000, 2004, 2007, 2010).
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="layer">The DXF layer, or <c>null</c> to read from all layers.</param>
            <returns>A sequence of <see cref="T:Gisvl.Framework.Spatial.Feature"/>s.</returns>
            <remarks>
            The following entities are returned: points, lwpolylines, polylines, lines, circles, arcs, ellipses, texts and inserts. 
            Closed entities are treated as sqlgeometry polygons, otherwise as sqlgeometry linestrings. 
            Since sqlgeometry can not handle circles, arcs and ellipses, they are approached with a precision of 128 line segments for a full circle.
            For texts, features (points) will be returned having the text value stored in an attribute "dxfText". 
            For inserts, features (points) will be returned having the insert block name stored in an attribute "dxfBlock". 
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.SetCurrentVersion(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Sets the current version on SDE databases using the <c>set_current_version</c> stored procedure.
            </summary>
            <param name="connection">The connection.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is <c>null</c> or <paramref name="version"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="connection"/> is not open.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">SQL Server returned a warning or error.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromShapeCore(System.IO.Stream,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Implements the lazy part of <see cref="M:Gisvl.Framework.Spatial.FeatureLoader.FromShape(System.IO.Stream,Gisvl.Framework.Spatial.Srid)"/>.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureLoader.FromDbDataReaderCore(System.Data.Common.DbDataReader)">
            <summary>
            Implements the lazy part of <see cref="M:Gisvl.Framework.Spatial.FeatureLoader.FromDbDataReader(System.Data.Common.DbDataReader)"/>.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The lazy iterator iterating over the data reader.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.FeatureQuery">
             <summary>
             Represents a spatial query to execute against a SQL Server database.
             </summary>
             <remarks>
             For most spatial queries, consider using <see cref="M:Microsoft.SqlServer.Types.SqlGeometry.Filter(Microsoft.SqlServer.Types.SqlGeometry)"/> and use <see cref="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.WhereIntersects(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)"/>, <see cref="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.WhereInside(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)"/> and
             <see cref="M:Gisvl.Framework.Spatial.EnumerableOfFeatureExtensions.ClipWhereIntersects(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},Microsoft.SqlServer.Types.SqlGeometry)"/> for better performance than routines provided by <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/>.
             </remarks>
             <example>
             <code language="cs">
             using (SqlConnection connection = new SqlConnection(connectionString))
             {
                 connection.Open();
            
                 SqlGeometry geometry = SqlGeometry.STGeomFromText(new System.Data.SqlTypes.SqlChars(new System.Data.SqlTypes.SqlString(wkt)), srid);
            
                 var featureQuery = from f in new FeatureQuery(connection, schema + "." + table, fields.Select(a => a.Name).ToArray()).WithGeometryColumn("SHAPE")
                                    where f.Geometry.Filter(geometry).Value
                                    select f;
            
                 var features = featureQuery.AsEnumerable().WhereIntersects(geometry);
            
                 int count;
                 using (ShapefileWriter target = new ShapefileWriter(System.IO.Path.Combine(outputMap, outFeatureClass), geometryType.GetShapeGeometryType(), new DbaseFileHeader(fields)))
                 {
                     count = target.Write(features);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.#ctor(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.FeatureQuery"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table, view or table-valued function to query.</param>
            <param name="attributes">The non-spatial attributes to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is <c>null</c> or <paramref name="tableName"/> is <c>null</c> or <paramref name="attributes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tableName"/> is empty.</exception>
            <example>
            <code language="cs">
            var q1 = new FeatureQuery(connection, "dbo.gbg");
            var q2 = new FeatureQuery(connection, "dbo.gbg", "IDN", "TPC");
            var q3 = new FeatureQuery(connection, "dbo.SomeFunction(7)", "IDN", "TPC");
            </code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.WithGeometryColumn(System.String)">
            <summary>
            Names the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> column in the table to query.
            </summary>
            <param name="geometryColumnName">Name of the geometry column.</param>
            <returns>A spatial query that will retrieve features containing geometries.</returns>
            <example>
            <code language="cs">
            var q1 = new FeatureQuery(connection, "dbo.gbg").WithGeometryColumn("SHAPE");
            var q2 = new FeatureQuery(connection, "dbo.gbg", "IDN", "TPC").WithGeometryColumn("SHAPE");
            var q3 = new FeatureQuery(connection, "dbo.SomeFunction(7)", "IDN", "TPC").WithGeometryColumn("SHAPE");
            </code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.JoinGeometryColumn(System.String,System.String,System.String,System.String)">
            <summary>
            Names the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> column in a table to join with.
            </summary>
            <param name="geometryColumnName">Name of the geometry column.</param>
            <param name="geometryTableName">Name of the table containing the geometry.</param>
            <param name="mainTableJoinColumn">The main table join column.</param>
            <param name="geometryTableJoinColumn">The geometry table join column.</param>
            <returns>A spatial query that will retrieve features containing geometries.</returns>
            <example>
            <code language="cs">
            var q = new FeatureQuery(connection, "dbo.SomeFunction(7)", "IDN", "TPC").JoinGeometryColumn("SHAPE", "dbo.gbg", "IDN", "IDN");
            </code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.Where(System.Linq.Expressions.Expression{System.Func{Gisvl.Framework.Spatial.Feature,System.Boolean}})">
            <summary>
            Filters a feature query based on a predicate expression that will be evaluated by SQL Server.
            </summary>
            <param name="predicate">The predicate expression.</param>
            <returns>A spatial query that will be filtered by the predicate expression.</returns>
            <example>
            <code language="cs">
            <![CDATA[
            var features = from f in new FeatureQuery(connection, "dbo.gbg", "IDN", "TPC").WithGeometryColumn("SHAPE")
                           where (int)f.Attributes["TPC"] == 1 && f.Geometry.Filter(geometry).Value
                           select f;
            ]]>
            </code>
            This query translates to
            <code language="sql">
            SELECT A.[SHAPE],A.[IDN] AS [IDN],A.[TPC] AS [TPC] FROM dbo.gbg AS A WHERE (A.[TPC] = @p1) AND (A.[SHAPE].Filter(@p2) = 1)
            </code>
            </example>
            <remarks>
            <para>
            This method allows filtering the result of a spatial query, by providing a boolean expression that will be translated into SQL and sent to the server for evaluation.
            </para>
            <para>
            The following expressions are allowed:
            </para>
            <list type="bullet">
            <item>comparisons using <c>==</c>, <c>!=</c>, <c>&lt;</c>, <c>&lt;=</c>, <c>&gt;=</c>, <c>&gt;</c> on attributes and values.</item>
            <item>string predicates <c>StartsWith</c>, <c>EndsWith</c> and <c>Contains</c> on attributes using a value.</item>
            <item>spatial predicates <c>Filter</c>, <c>STContains</c>, <c>STCrosses</c>, <c>STDisjoint</c>, <c>STEquals</c>, <c>STIntersects</c>, <c>STOverlaps</c>, <c>STTouches</c>, <c>STWithin</c> on the feature geometry using a value.</item>
            <item>any combination of the above using <c>&amp;&amp;</c>, <c>||</c> and <c>!</c> operators.</item>
            </list>
            <para>
            Attributes are specified as <c>(T)f.Attribute[name]</c>, where <c>T</c> is the type of the attribute, <c>f</c> is the range variable and <c>name</c> is a string expression that can be evaluated client-side.
            </para>
            <para>
            Values are either expressions that can be evaluated client-side to a non-null value, or the value of a function of the feature geometry, e.g. <c>f.Geometry.STArea().Value</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.Where(System.String)">
            <summary>
            Filters a feature query based on a SQL predicate string that will be evaluated by SQL Server.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>A spatial query that will be filtered by the SQL predicate.</returns>
            <remarks>
            <note type="security">
            The predicate will be sent to the database as is, without validation. This opens your solution to SQL injection attacks.
            Make sure to use only trusted and validated predicate strings.
            </note>
            </remarks>
            <example>
            <code language="cs">
            <![CDATA[
            var features = new FeatureQuery(connection, "dbo.gvl", "IDN", "TPC")
                .WithGeometryColumn("SHAPE")
                .Where("TPC <> 4");
            ]]>
            </code>
            This query translates to
            <code language="sql">
            SELECT A.[SHAPE],A.[IDN] AS [IDN],A.[TPC] AS [TPC] FROM dbo.gvl AS A WHERE TPC &lt;&gt; 4
            </code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.ToString">
            <summary>
            Returns the SQL <see cref="T:System.String"/> that will be sent to the database when enumerating this query.
            </summary>
            <returns>
            The SQL <see cref="T:System.String"/> that will be sent to the database when enumerating this query.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.AsEnumerable">
            <summary>
            Returns an enumerable that can be used to iterate through the query result feature sequence.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that can be used to iterate through the query result.
            </returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Sql Server returned a warning or error.</exception>
            <exception cref="T:System.InvalidOperationException">The connection is not open.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.FeatureQuery.GetStringOperandValue(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Helper method to get the first string-valued parameter of a method call expression.
            </summary>
            <param name="m">Method call expression to get the string-valued parameter from.</param>
            <returns>First parameter string value.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Functions">
            <summary>
            Provides functions to interpolate between coordinates or geocoordinates.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Functions.InterpolateBetweenGeoCoordinates(Gisvl.Framework.Spatial.GeoCoordinate,Gisvl.Framework.Spatial.GeoCoordinate,System.Double)">
            <summary>
            Finds the point that is the given distance from the start point in the direction of the end point. The distance must be less than the distance between these two points.
            </summary>
            <param name="start">The startpoint.</param>
            <param name="end">The endpoint.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            start
            or
            end
            </exception>
            <exception cref="T:System.ArgumentException">The distance value provided exceeds the distance between the two points.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">distance;The distance must be positive.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Functions.InterpolateBetweenCoordinates(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate,System.Double)">
            <summary>
            Finds the point that is the given distance from the start point in the direction of the end point. The distance must be less than the distance between these two points.
            </summary>
            <param name="start">The startpoint.</param>
            <param name="end">The endpoint.</param>
            <param name="distance">The distance.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            start
            or
            end
            </exception>
            <exception cref="T:System.ArgumentException">The distance value provided exceeds the distance between the two points.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">distance;The distance must be positive.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Functions.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="a">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Functions.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="a">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Functions.Sqr(System.Double)">
            <summary>
            Squares a double without having to evaluate the operand twice.
            </summary>
            <param name="value">The value.</param>
            <returns>The square of the value.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.GeoCoordinate">
            <summary>
            Represents a coordinate on the surface of the earth.
            </summary>
            <remarks>
            Coordinates are two-dimensional points, with an additional Z and M value.
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeoCoordinate.latitude">
            <summary>
            Stores the Latitude value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeoCoordinate.longitude">
            <summary>
            Stores the Longitude value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeoCoordinate.z">
            <summary>
            Stores the Z value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeoCoordinate.m">
            <summary>
            Stores the M value.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> class.
            </summary>
            <param name="latitude">The Latitude value.</param>
            <param name="longitude">The Longitude value.</param>
            <param name="z">The Z value.</param>
            <param name="m">The M value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> class.
            </summary>
            <param name="latitude">The Latitude value.</param>
            <param name="longitude">The Longitude value.</param>
            <param name="z">The Z value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> class.
            </summary>
            <param name="latitude">The Latitude value.</param>
            <param name="longitude">The Longitude value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/> class at (0,0,NaN,NaN).
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeoCoordinate.Latitude">
            <summary>
            Gets the Latitude value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeoCoordinate.Longitude">
            <summary>
            Gets the Longitude value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeoCoordinate.Z">
            <summary>
            Gets the Z value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeoCoordinate.M">
            <summary>
            Gets the M value.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.Distance(Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Returns the distance in meters to the provided coordinate.
            </summary>
            <param name="other">Coordinate with which to do the distance comparison.</param>
            <remarks>
            Distance is calculated without taking into account the Z value.
            </remarks>
            <returns>The distance to the provided coordinate.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.op_Equality(Gisvl.Framework.Spatial.GeoCoordinate,Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The first coordinate.</param>
            <param name="obj2">The second coordinate.</param>
            <returns>
            <c>true</c> if both coordinates are equal, <c>false</c> otherwise.
            </returns>
            <remarks>
            Equality for non-null coordinates is defined by the <see cref="M:Gisvl.Framework.Spatial.GeoCoordinate.Equals(Gisvl.Framework.Spatial.GeoCoordinate)"/> function.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.op_Inequality(Gisvl.Framework.Spatial.GeoCoordinate,Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The first coordinate.</param>
            <param name="obj2">The second coordinate.</param>
            <returns>
            <c>true</c> if both coordinates are not equal, <c>false</c> otherwise.
            </returns>
            <remarks>
            Equality for non-null coordinates is defined by the <see cref="M:Gisvl.Framework.Spatial.GeoCoordinate.Equals(Gisvl.Framework.Spatial.GeoCoordinate)"/> function.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.Equals(Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Indicates whether the current coordinate is equal to another coordinate.
            </summary>
            <param name="other">The coordinate to compare with this coordinate.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the form (Latitude,Longitude,Z,M) that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.GeographyFactory">
            <summary>
            Provides methods for building geography objects from coordinates.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeographyFactory.Default">
            <summary>
            Provides a default GeometryFactory that generates geographies having the WGS84 spatial-reference ID (4326).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeographyFactory.srid">
            <summary>
            Stores the spatial-reference ID.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.#ctor(Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeographyFactory"/> class that generates geometries having the given spatial-reference ID.
            </summary>
            <param name="srid">A spatial-reference ID.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeographyFactory.Srid">
            <summary>
            Gets the spatial-reference ID for the geographies created with the current <see cref="T:Gisvl.Framework.Spatial.GeographyFactory"/>.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.CreateFromWellKnownText(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> from a Well Known Text.
            </summary>
            <param name="text">The WKT representation of the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance you wish to return.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance constructed from the WKT representation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="text"/> is not well-formatted.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.CreatePoint(Gisvl.Framework.Spatial.GeoCoordinate)">
            <summary>
            Creates a point from the provided <see cref="T:Gisvl.Framework.Spatial.GeoCoordinate"/>.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>The point.</returns>
            <remarks>If the provided <paramref name="coordinate"/> is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeography.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.CreatePoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a point from the provided ordinates.
            </summary>
            <param name="latitude">The latitude ordinate.</param>
            <param name="longitude">The longitude ordinate.</param>
            <param name="z">The z ordinate.</param>
            <param name="m">The m ordinate.</param>
            <returns>
            The point.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.CreateLineString(Gisvl.Framework.Spatial.GeoCoordinate[])">
            <summary>
            Creates a line string from the provided <paramref name="coordinates"/>.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The line string.</returns>
            <remarks>If the provided <paramref name="coordinates"/> array is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeography.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeographyFactory.CreateMultiPoint(Gisvl.Framework.Spatial.GeoCoordinate[])">
            <summary>
            Creates a multipoint from the provided <paramref name="coordinates"/>.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The multipoint.</returns>
            <remarks>If the provided <paramref name="coordinates"/> list is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeography.Null"/> is returned.</remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.RasterizedGeometry">
            <summary>
            Provides a recursively rasterized version of a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/>.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.RasterizedGeometry.tolerance">
            <summary>
            Is the tolerance that is allowed to decide if a point is on a linesegment or not.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.RasterizedGeometry.Quadrant.bounds">
            <summary>
            Stores the bounds for this quadrant.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.RasterizedGeometry.Quadrant.geometry">
            <summary>
            Stores the intersection of the original feature with the bounds for this quadrant.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.RasterizedGeometry.Quadrant.cleur">
            <summary>
            Stores the Cleur for this quadrant.
            </summary>
            <remarks>
            Black means the geometry is a rectangle equal to the bounds, white means the geometry is empty, grey is everything else.
            </remarks>
        </member>
        <member name="P:Gisvl.Framework.Spatial.RasterizedGeometry.Quadrant.Bounds">
            <summary>
            Gets the bounds for this Quadrant.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlGeometryBuilderExtensions">
            <summary>
            Extension methods on SqlGeometryBuilder.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Coordinate">
            <summary>
            Represents a coordinate on the 2-dimensional Cartesian plane or in 3-dimensional space, including M values.
            </summary>
            <remarks>
            Coordinates are two-dimensional points, with an additional Z and M value.
            </remarks>
            <threadsafety static="true" instance="true" />
            <example>
            <code language = "cs">
            Coordinate c = new Coordinate(150.12345, 250.54321, 10.55555);
            c.Round(3);
            </code>
            </example>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Coordinate.x">
            <summary>
            Stores the X value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Coordinate.y">
            <summary>
            Stores the Y value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Coordinate.z">
            <summary>
            Stores the Z value.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Coordinate.m">
            <summary>
            Stores the M value.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> class at (x,y,z,m).
            </summary>
            <param name="x">The X value.</param>
            <param name="y">The Y value.</param>
            <param name="z">The Z value.</param>
            <param name="m">The M value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> class at (x,y,z,NaN).
            </summary>
            <param name="x">The X value.</param>
            <param name="y">The Y value.</param>
            <param name="z">The Z value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> class at (x,y,NaN,NaN).
            </summary>
            <param name="x">The X value.</param>
            <param name="y">The Y value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Coordinate"/> class at (0,0,NaN,NaN).
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Coordinate.X">
            <summary>
            Gets the X value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Coordinate.Y">
            <summary>
            Gets the Y value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Coordinate.Z">
            <summary>
            Gets the Z value.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Coordinate.M">
            <summary>
            Gets the M value.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.op_Equality(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The first coordinate.</param>
            <param name="obj2">The second coordinate.</param>
            <returns>
            <c>true</c> if both coordinates are equal, <c>false</c> otherwise.
            </returns>
            <remarks>
            Equality for non-null coordinates is defined by the <see cref="M:Gisvl.Framework.Spatial.Coordinate.Equals(Gisvl.Framework.Spatial.Coordinate)"/> function.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.op_Inequality(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The first coordinate.</param>
            <param name="obj2">The second coordinate.</param>
            <returns>
            <c>true</c> if both coordinates are not equal, <c>false</c> otherwise.
            </returns>
            <remarks>
            Equality for non-null coordinates is defined by the <see cref="M:Gisvl.Framework.Spatial.Coordinate.Equals(Gisvl.Framework.Spatial.Coordinate)"/> function.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Round(System.Int32)">
            <summary>
            Rounds the coordinate by rounding the X, Y and Z ordinates to the specified number of decimals.
            </summary>
            <param name="decimals">The number of decimals.</param>
            <returns>The rounded coordinate.</returns>
            <remarks>The M value is not modified by this operation.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Equals2D(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Returns whether the planar projections of the two coordinates are equal.
            </summary>
            <param name="other">Coordinate with which to do the 2D comparison.</param>
            <returns>
            <c>true</c> if and only if the X and Y ordinates are equal; the Z ordinates do not have to be equal.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <remarks>
            <para>
            Two-dimensional coordinates are equal if the X and Y ordinates are equal. Three-dimensional coordinates are equal if the X, Y, Z ordinates and their M values are equal.
            A two-dimensional coordinate is never equal to a three-dimensional coordinate.
            </para>
            <para>
            Formally, for two coordinates to be equal, the X and Y ordinates must be equal, and if Z ordinates and M values are defined, they must both be defined and equal.
            </para>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Equals(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Indicates whether the current coordinate is equal to another coordinate.
            </summary>
            <param name="other">The coordinate to compare with this coordinate.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <remarks>
            <para>
            Two-dimensional coordinates are equal if the X and Y ordinates are equal. Three-dimensional coordinates are equal if the X, Y, Z ordinates and their M values are equal.
            A two-dimensional coordinate is never equal to a three-dimensional coordinate.
            </para>
            <para>
            Formally, for two coordinates to be equal, the X and Y ordinates must be equal, and if Z ordinates and M values are defined, they must both be defined and equal.
            </para>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Equals(Gisvl.Framework.Spatial.Coordinate,System.Double)">
            <summary>
            Indicates whether the current coordinate is equal to another coordinate, within a given tolerance.
            </summary>
            <param name="other">The coordinate to compare with this coordinate.</param>
            <param name="tolerance">The tolerance, i.e. the maximum distance the two coordinates may be apart and still considered equal.</param>
            <returns>
            <c>true</c> if the current coordinate is within the tolerance distance from the <paramref name="other"/> coordinate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the form (X,Y,Z,M) that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.Distance(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Returns Euclidean distance from the provided coordinate.
            </summary>
            <param name="other">Coordinate with which to do the distance comparison.</param>
            <remarks>
            Distance is calculated in the X-Y-plane, not taking into account the Z value.
            </remarks>
            <returns>The Euclidean distance from the provided coordinate.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Coordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Envelope">
            <summary>
            Defines a rectangular region of the 2D coordinate plane.
            </summary>
            <remarks>
            <para>
            Envelopes are often used to represent the bounding box or extent of a geometry, e.g. the minimum and maximum x and y values of the coordinates.
            </para>
            <para>
            When envelope objects are created, the supplied extent values are automatically sorted into the correct order.
            </para>
            <para>
            Note that envelopes support infinite or half-infinite regions, by using the values of
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>.
            </para>
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Gisvl.Framework.Spatial.Envelope.minx">
            <summary>
            Stored the minimum x-coordinate
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Envelope.maxx">
            <summary>
            Stores the maximum x-coordinate
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Envelope.miny">
            <summary>
            Stores the minimum y-coordinate
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Envelope.maxy">
            <summary>
            Stores the maximum y-coordinate
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Envelope"/> class, that contains no points.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Envelope"/> class for a region defined by minimum and maximum values.
            </summary>
            <param name="x1">The first x-value.</param>
            <param name="x2">The second x-value.</param>
            <param name="y1">The first y-value.</param>
            <param name="y2">The second y-value.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Envelope"/> class defined by a single point.
            </summary>
            <param name="x">The x value of the point.</param>
            <param name="y">The y value of the point.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.#ctor(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Coordinate})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Envelope"/> class for a collection of coordinates.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The envelope of the coordinate collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="coordinates"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is an empty envelope.
            </summary>
            <value>
              <c>true</c> if this instance contains no points; otherwise, <c>false</c>.
            </value>
            <returns>
              <c>true</c> if this Envelope contains no points, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.Width">
            <summary>
            Gets the difference between the maximum and minimum x values.
            </summary>
            <returns>max x - min x, or 0 if this is an empty Envelope.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.Height">
            <summary>
            Gets the difference between the maximum and minimum y values.
            </summary>
            <returns>max y - min y, or 0 if this is an empty Envelope.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.MinX">
            <summary>
            Gets the Envelopes minimum x-value.
            </summary>
            <remarks>
            min x > max x indicates that this is a null Envelope.
            </remarks>
            <returns>The minimum x-coordinate.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.MaxX">
            <summary>
            Gets the Envelopes maximum x-value.
            </summary>
            <remarks>
            min x > max x indicates that this is a null Envelope.
            </remarks>
            <returns>The maximum x-coordinate.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.MinY">
            <summary>
            Gets the Envelopes minimum y-value.
            </summary>
            <remarks>
            min y > max y indicates that this is a null Envelope.
            </remarks>
            <returns>The minimum y-coordinate.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.MaxY">
            <summary>
            Gets the Envelopes maximum y-value.
            </summary>
            <remarks>
            min y > max y indicates that this is a null Envelope.
            </remarks>
            <returns>The maximum y-coordinate.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.Area">
            <summary>
            Gets the area of the envelope.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Envelope.Center">
            <summary>
            Gets the coordinate of the center of this envelope, or <c>null</c> if this envelope is empty).
            </summary>
            <returns>
            The centre coordinate of this envelope, or <c>null</c> if the envelope is empty.
            </returns>.
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.op_Equality(Gisvl.Framework.Spatial.Envelope,Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The first envelope.</param>
            <param name="obj2">The second envelope.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.op_Inequality(Gisvl.Framework.Spatial.Envelope,Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The first envelope.</param>
            <param name="obj2">The second envelope.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ExpandBy(System.Double)">
            <summary>
            Expands this envelope by a given distance in all directions.
            Both positive and negative distances are supported.
            </summary>
            <param name="distance">The distance to expand the envelope.</param>
            <returns>A new envelope equal to this envelope expanded by <paramref name="distance"/> in all directions.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ExpandBy(System.Double,System.Double)">
            <summary>
            Expands this envelope by a given distance in all directions.
            Both positive and negative distances are supported.
            </summary>
            <param name="deltaX">The distance to expand the envelope along the the X axis.</param>
            <param name="deltaY">The distance to expand the envelope along the the Y axis.</param>
            <returns>
            A new envelope equal to this envelope expanded by <paramref name="deltaX"/> left and right and <paramref name="deltaY"/> top and bottom.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ExpandToInclude(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Enlarges the boundary of the Envelope so that it contains the coordinate.
            Does nothing if the coordinate is already on or within the boundaries.
            </summary>
            <param name="coordinate">The coordinate of the point to include.</param>
            <returns>The smallest envelope that contains both this envelope and the point for which the coordinate is given.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="coordinate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ExpandToInclude(System.Double,System.Double)">
            <summary>
            Enlarges the boundary of the Envelope so that it contains the values x and y.
            Does nothing if values x and y are already on or within the boundaries.
            </summary>
            <param name="x">The value to lower the minimum x to or to raise the maximum x to.</param>
            <param name="y">The value to lower the minimum y to or to raise the maximum y to.</param>
            <returns>The new envelope.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ExpandToInclude(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Enlarges the boundary of the Envelope so that it contains another envelope.
            Does nothing if the other envelope is already on or within the boundaries.
            </summary>
            <param name="other">the Envelope to merge with.</param>
            <returns>The new envelope.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Translate(System.Double,System.Double)">
            <summary>
            Translates this envelope by given amounts in the X and Y direction.
            </summary>
            <param name="transX">The amount to translate along the X axis.</param>
            <param name="transY">The amount to translate along the Y axis.</param>
            <returns>The new envelope.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Intersection(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Gets the intersection with the specified envelope.
            </summary>
            <param name="other">The other envelope.</param>
            <returns>The new envelope.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Intersects(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Check if the region defined by another envelope
            overlaps (intersects) the region of this Envelope.
            </summary>
            <param name="other"> the Envelope which this Envelope is
            being checked for overlapping.
            </param>
            <returns>
            <c>true</c> if the Envelopes overlap.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Contains(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Returns <c>true</c> if the given coordinate lies in or on the envelope.
            </summary>
            <param name="coordinate"> the coordinate which this Envelope is
            being checked for containing.</param>
            <returns>
            <c>true</c> if the coordinate lies in the interior or
            on the boundary of this Envelope.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="coordinate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Contains(System.Double,System.Double)">
            <summary>
            Returns <c>true</c> if the given point lies in or on the envelope.
            </summary>
            <param name="x"> the x-coordinate of the point which this Envelope is
            being checked for containing.</param>
            <param name="y"> the y-coordinate of the point which this Envelope is
            being checked for containing.</param>
            <returns><c>true</c> if (x, y) lies in the interior or
            on the boundary of this Envelope.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Contains(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Returns <c>true</c> if the Envelope other
            lies completely inside this Envelope (inclusive of the boundary).
            </summary>
            <param name="other"> the Envelope which this Envelope is being checked for containing.</param>
            <returns><c>true</c> if the other envelope is contained in this Envelope.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Distance(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Computes the distance between this and another Envelope.
            </summary>
            <param name="other">The other envelope.</param>
            <returns>
            The distance between this and another Envelope.
            </returns>
            <remarks>
            The distance between overlapping Envelopes is 0. Otherwise, the distance is the Euclidean distance between the closest points.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.Equals(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Indicates whether the current envelope is equal to another envelope.
            </summary>
            <param name="other">An envelope to compare with this envelope.</param>
            <returns>
            <c>true</c> if the current envelope is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Envelope.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.GeometryFactory">
            <summary>
            Supplies a set of utility methods for building geometry objects from lists of Coordinates.
            </summary>
            <example>
            <code language ="cs">
            GeometryFactory geometryFactory = new GeometryFactory(31370);
            
            SqlGeometry geometry = geometryFactory.CreatePoint(new Coordinate(x, y, z, m));
            </code>
            </example>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeometryFactory.srid">
            <summary>
            Stores the spatial-reference ID.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.GeometryFactory.Default">
            <summary>
            Provides a default GeometryFactory that generates geometries having the Belgian Lambert 72 spatial-reference ID.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.#ctor(Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.GeometryFactory"/> class that generates geometries having the given spatial-reference ID.
            </summary>
            <param name="srid">A spatial-reference ID.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GeometryFactory.Srid">
            <summary>
            Gets the spatial-reference ID for the geometries created with the current <see cref="T:Gisvl.Framework.Spatial.GeometryFactory"/>.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreatePoint(Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Creates a point from the provided <see cref="T:Gisvl.Framework.Spatial.Coordinate"/>.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>The point.</returns>
            <remarks>If the provided <paramref name="coordinate"/> is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreatePoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a point from the provided ordinates.
            </summary>
            <param name="x">The x ordinate.</param>
            <param name="y">The y ordinate.</param>
            <param name="z">The z ordinate.</param>
            <param name="m">The m ordinate.</param>
            <returns>
            The point.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreateLineString(Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Creates a line string from the provided <paramref name="coordinates"/>.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The line string.</returns>
            <remarks>If the provided <paramref name="coordinates"/> array is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreatePolygon(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Creates a rectangular polygon from a given Envelope.
            </summary>
            <param name="envelope">The envelope.</param>
            <returns>
            The polygon.
            </returns>
            <remarks>If the area of the envelop is 0, an empty polygon is returned.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="envelope"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreatePolygon(Gisvl.Framework.Spatial.Coordinate[],Gisvl.Framework.Spatial.Coordinate[][])">
            <summary>
            Creates a linear ring from the provided <paramref name="exteriorRing"/>.
            </summary>
            <param name="exteriorRing">The coordinates of the exterior ring.</param>
            <param name="interiorRings">The coordinates of the interior rings.</param>
            <returns>
            The polygon.
            </returns>
            <remarks>
            If the provided <paramref name="exteriorRing"/> array is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreateFromWellKnownText(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> from a Well Known Text.
            </summary>
            <param name="text">The WKT representation of the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance you wish to return.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance constructed from the WKT representation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is <c>null</c>.</exception>
            <exception cref="T:System.FormatException"><paramref name="text"/> is not well-formatted.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreateMultiPolygon(System.Collections.Generic.List{Gisvl.Framework.Spatial.PolygonPrototype})">
            <summary>
            Creates a polygon from the provided <paramref name="prototypes"/>.
            </summary>
            <param name="prototypes">The list of PolygonPrototype, holding the exterior and interior rings.</param>
            <returns>The polygon.</returns>
            <remarks>If the provided <paramref name="prototypes"/> list is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreateMultiPoint(Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Creates a mutlipoint from the provided <paramref name="coordinates"/>.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The multipoint.</returns>
            <remarks>If the provided <paramref name="coordinates"/> list is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeometryFactory.CreateMultiLineString(System.Collections.Generic.List{Gisvl.Framework.Spatial.Coordinate[]})">
            <summary>
            Creates a multilinestring from the provided <paramref name="coordinateList"/>.
            </summary>
            <param name="coordinateList">The list of coordinates.</param>
            <returns>The multilinestring.</returns>
            <remarks>If the provided <paramref name="coordinateList"/> list is <c>null</c>, <see cref="P:Microsoft.SqlServer.Types.SqlGeometry.Null"/> is returned.</remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.PolygonPrototype">
            <summary>
            Provides a helper wrapper for creating multipolygons from lists of Coordinates.
            </summary>
            <example>
            <code language ="cs">
            List&lt;PolygonPrototype&gt; prototypes = new List&lt;PolygonPrototype&gt;(exteriorRing.Count);
            PolygonPrototype polygonPrototype = new PolygonPrototype(exteriorRing);
            
            polygonPrototype.InteriorRings.Add(interiorRing);
            prototypes.Add(polygonPrototype);
            
            SqlGeometry geometry = geometryFactory.CreateMultiPolygon(prototypes);
            </code>
            </example>
        </member>
        <member name="F:Gisvl.Framework.Spatial.PolygonPrototype.ExteriorRing">
            <summary>
            The exterior ring from array of Coordinates.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.PolygonPrototype.InteriorRings">
            <summary>
            The interior rings from list of arrays of Coordinates.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonPrototype.#ctor(Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.PolygonPrototype"/> class.
            </summary>
            <param name="exteriorRing">The exterior ring.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlGeographyExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> and related types.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.GetParts(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Gets the parts in a multipart geography.
            </summary>
            <param name="geography">The multipart geography.</param>
            <returns>A sequence of geographies.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.GetOpenGisGeographyType(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Gets the type of the OGIS geography from a SQL geography.
            </summary>
            <param name="geography">The SQL geography.</param>
            <returns>Type of OGIS geography.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="geography"/> has no known type of OpenGisGeometryType</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.ToGml(Microsoft.SqlServer.Types.SqlGeography,System.Boolean)">
            <summary>
            Converts a geography to GML 3, optionally including the srsName attribute as a URI.
            </summary>
            <param name="geography">The geography to convert.</param>
            <param name="includeSrsNameAsUri"><c>true</c> to include the srsName, <c>false</c> otherwise.</param>
            <returns>A GML 3 representation of the geography.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.ToGeoCoordinate(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Returns a coordinate from a point geography.
            </summary>
            <param name="geography">The SQL geography.</param>
            <returns>The coordinate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="geography"/> is not a point.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.ToGeoCoordinates(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Returns a sequence of coordinates from a geography.
            </summary>
            <param name="sqlGeography">The SQL geography.</param>
            <returns>Sequence of coordinates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeography"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.GetRings(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Gets a list with all containing rings from a polygon geography.
            </summary>
            <param name="geography">The polygon.</param>
            <returns>List of rings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="geography"/> is not a polygon.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.ToGeoCoordinateArray(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Returns a sequence of coordinates from a geography.
            </summary>
            <param name="sqlGeography">The SQL geography.</param>
            <returns>Sequence of coordinates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeography"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeographyExtensions.ToGeoCoordinatesCore(Microsoft.SqlServer.Types.SqlGeography)">
            <summary>
            Implements the lazy part of ToCoordinates(this SqlGeography sqlGeography).
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlGeometryExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> and related types.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetParts(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the parts in a multipart geometry.
            </summary>
            <param name="geometry">The multipart geometry.</param>
            <returns>A sequence of geometries.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetShapeGeometryType(Microsoft.SqlServer.Types.OpenGisGeometryType,System.Boolean,System.Boolean)">
            <summary>
            Gets the ESRI shape type for a given Open Geospatial Consortium (OGC) geometry type.
            </summary>
            <param name="openGisGeometryType">Open Geospatial Consortium (OGC) geometry type.</param>
            <param name="hasZ">if set to <c>true</c>, the shape type will support Z values.</param>
            <param name="hasM">if set to <c>true</c>, the shape type will support M values.</param>
            <returns>The ESRI shape type for a given Open Geospatial Consortium (OGC) geometry type.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetOpenGisGeometryType(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the type of the OGIS geometry from a sqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>Type of OGIS geometry.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sqlGeometry"/> has no known type of OpenGisGeometryType</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.WriteAsShapeToStream(Microsoft.SqlServer.Types.SqlGeometry,System.IO.Stream,System.IO.Stream)">
            <summary>
            Writes a geometry to a stream in shape file format.
            </summary>
            <param name="sqlGeometry">The SQL geometry to be written.</param>
            <param name="shpStream">The shp stream to write to.</param>
            <param name="shxStream">The shx stream to write to.</param>
            <exception cref="T:System.ArgumentNullException">sqlGeometry or stream is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">Cannot write to the stream, cannot seek in the stream, or the stream is not empty.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToGml(Microsoft.SqlServer.Types.SqlGeometry,System.Boolean)">
            <summary>
            Converts a geometry to GML 3, optionally including the srsName attribute as a URI.
            </summary>
            <param name="geometry">The geometry to convert.</param>
            <param name="includeSrsNameAsUri"><c>true</c> to include the srsName, <c>false</c> otherwise.</param>
            <returns>A GML 3 representation of the geometry.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.Round(Microsoft.SqlServer.Types.SqlGeometry,System.Int32)">
            <summary>
            Rounds the specified geometry to the specified number of decimals.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>A geometry with coordinates rounded to the specified number of decimals.</returns>
            <remarks>
            Rounding is performed using <see cref="M:Gisvl.Framework.Spatial.Coordinate.Round(System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.Transform(Microsoft.SqlServer.Types.SqlGeometry,System.Func{Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate})">
            <summary>
            Transforms the specified geometry using the specified coordinate transformation.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="transformation">The coordinate transformation.</param>
            <returns>The transformed geometry</returns>
            <example>
            <code language="cs">geometry = geometry.Transform(coordinate => coordinate * 3);</code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetShapeGeometryType(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the type of the ESRI shape geometry from a SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>Type of ESRI Shape geometry.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToCoordinateArray(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Returns a coordinate array from a SqlGeometry .
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>Array of coordinates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToCoordinates(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Returns a sequence of coordinates from a SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>Sequence of coordinates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetNumberOfRings(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the number of rings from a polygon of multipolygon SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>
            The number of rings.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetExtent(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the extent of the SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>The envelope of the extent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToLineSegments(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Returns an array with the line segments of a linestring SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>An array of line segments.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sqlGeometry"/> is not a linestring.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ClosestPoint(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.Coordinate)">
            <summary>
            Calculates the point on a geometry that is closest to a given <paramref name="point"/>.
            </summary>
            <param name="sqlGeometry">The geometry.</param>
            <param name="point">The point coordinate.</param>
            <returns>The coordinate of the closest point on <paramref name="sqlGeometry"/> to <paramref name="point"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> or <paramref name="point"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sqlGeometry"/> is an unsupported geometry type.</exception>
            <remarks>
            The following geometry types are supported:
            <list type="bullet">
            <item>Point</item>
            <item>MultiPoint</item>
            <item>LineString</item>
            <item>MultiLineString</item>
            <item>Polygon</item>
            <item>MultiPolygon</item>
            </list>
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToCoordinate(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Returns a coordinate from a point SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>The coordinate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sqlGeometry"/> is not a point.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetRings(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets a list with all containing rings from a (multi)polygon SqlGeometry.
            </summary>
            <param name="sqlGeometry">The polygon or multipolygon.</param>
            <returns>List of rings.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sqlGeometry"/> is not a polygon or multipolygon.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.Distance(Microsoft.SqlServer.Types.SqlGeometry,Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Returns the distance between 2 point geometries.
            </summary>
            <param name="thisPoint">The first point.</param>
            <param name="otherPoint">The second point.</param>
            <returns>The distance.</returns>
            <exception cref="T:System.ArgumentNullException">
            otherPoint
            or
            thisPoint
            </exception>
            <exception cref="T:System.ArgumentException">The extension method Distance only works for 2 points</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ConvertRingToPolygon(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Converts a linestring ring to a polygon SqlGeometry.
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns>A polygon geometry.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sqlGeometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.GetCenter(Microsoft.SqlServer.Types.SqlGeometry,System.Double@)">
            <summary>
            Gets a center for the provided geometry, suitable for placing a label.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="orientation">The orientation in degrees at which a label can be displayed, only used for linestrings.</param>
            <returns>A point inside or very close to the provided geometry.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToCoordinatesCore(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Implements the lazy part of <see cref="M:Gisvl.Framework.Spatial.SqlGeometryExtensions.ToCoordinates(Microsoft.SqlServer.Types.SqlGeometry)"/>
            </summary>
            <param name="sqlGeometry">The SQL geometry.</param>
            <returns></returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.QuadTree">
            <summary>
            This class efficiently stores and lazily retrieves arbitrarily sized and positioned features in a quad-tree data structure.
            This can be used to do efficient hit detection or visibility checks on objects in a two dimensional space.
            </summary>
            <remarks>
            Original class written by Chris Lovett.
            </remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.QuadTree.Quadrant">
            <summary>
            The quad tree is split up into four Quadrants and features are stored in the quadrant that contains them
            and each quadrant is split up into four child Quadrants recursively.  Objects that overlap more than
            one quadrant are stored in the features list for this Quadrant.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Quadrant.#ctor(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.QuadTree.Quadrant"/> class with a given bounds.
            </summary>
            <param name="bounds">The bounds of this quadrant</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.QuadTree.Quadrant.Bounds">
            <summary>
            Gets the bounds for this quadrant.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Quadrant.Insert(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Inserts the given feature.
            </summary>
            <param name="feature">The feature to insert.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Quadrant.GetFeaturesWhereExtentIntersects(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Returns all features in this quadrant whose extent intersects the given bounds.
            </summary>
            <param name="boundsToSearch">The bounds that intersects the feature you want returned.</param>
            <returns>A lazy list of feature.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Quadrant.GetFeaturesInside(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Returns all features in this quadrant that are fully contained within the given bounds.
            </summary>
            <param name="boundsToSearch">The bounds that contains the features you want returned.</param>
            <returns>A lazy list of features.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Quadrant.GetEnumerator">
            <summary>
            Enumerates over all features within this quadrant in random order.
            </summary>
            <returns>
            Enumerator that enumerates over all its features.
            </returns>
        </member>
        <member name="F:Gisvl.Framework.Spatial.QuadTree.root">
            <summary>
            The outer QuadTree class is essentially just a wrapper around a tree of Quadrants.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.QuadTree.Extent">
            <summary>
            Gets the extent used for the overall quad-tree indexing strategy.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.Insert(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Insert an feature into this QuadTree.
            </summary>
            <param name="feature">The feature to insert.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.GetFeaturesInside(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Get a list of the features that are fully inside the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The features that are inside the given bounds.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.GetFeaturesWhereExtentIntersects(Gisvl.Framework.Spatial.Envelope)">
            <summary>
            Get the features whose extent intersects the given bounds.
            </summary>
            <param name="bounds">The bounds to test.</param>
            <returns>The features whose extent intersects the given bounds.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:Gisvl.Framework.Spatial.QuadTree.GetFeaturesInside(Gisvl.Framework.Spatial.Envelope)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.QuadTree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns all items in the tree in unspecified order.
            </summary>
            <returns>An enumerator over all items in the tree in random order.</returns>
            <remarks>To get all items in the tree in prioritized-order then simply call <see cref="M:Gisvl.Framework.Spatial.QuadTree.GetFeaturesInside(Gisvl.Framework.Spatial.Envelope)"/> with an infinitely large rectangle.</remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.BinaryReadWriteExtensions.ReadBigEndianInt32(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte signed integer using the big-endian layout from the reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The int in big-endian layout.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.BinaryReadWriteExtensions.WriteBigEndianInt32(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes a 4-byte signed integer using the big-endian layout to the writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.BinaryReadWriteExtensions.ReadPaddedString(System.IO.BinaryReader,System.Int32,System.Char)">
            <summary>
            Reads a right-padded string.
            </summary>
            <param name="reader">The reader.</param>
            <param name="maxLength">The maximum length of the string.</param>
            <param name="paddingCharacter">The padding character.</param>
            <returns>
            The string, without the padded characters.
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.AttributeDescriptor">
             <summary>
             Represents the information associated with a feature attribute.
             </summary>
             <example>
             <code language="cs">
              DbaseFileHeader header = new DbaseFileHeader();
            
              header.Fields.Add(new AttributeDescriptor("Character", AttributeType.Character, 10));
              header.Fields.Add(new AttributeDescriptor("Date", AttributeType.Date, 8));
              header.Fields.Add(new AttributeDescriptor("DateTime", AttributeType.DateTime, 15));
              header.Fields.Add(new AttributeDescriptor("Logical", AttributeType.Logical, 1));
              header.Fields.Add(new AttributeDescriptor("Number", AttributeType.Number, 10));
             </code>
             </example>
             <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Gisvl.Framework.Spatial.AttributeDescriptor.#ctor(System.String,Gisvl.Framework.Spatial.AttributeType,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.AttributeDescriptor" /> class.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="length">The length of the attribute, in bytes.</param>
            <param name="decimals">The number of decimals in the attribute.</param>
            <param name="isMandatory">If set to <c>true</c>, indicates that the attribute is mandatory.</param>
            <exception cref="T:System.NotSupportedException"><paramref name="attributeType" /> is not supported.</exception>
            <remarks>
              <para>
            The length of an attribute represents the number of bytes used in a DBase file to store the contents of the attribute.
            DBase files use a character encoding for attribute contents, using one byte per character. For example, the length of a 
            <see cref="F:Gisvl.Framework.Spatial.AttributeType.Date" /> field is 8 bytes. For strings composed of ASCII characters,
            the length of an attribute corresponds to the maximum number of ASCII characters in the string.
              </para>
              <para>
            Numeric values are stored in decimal representation in DBase files, using one byte per decimal digit, and one byte for the decimal point (if <see cref="P:Gisvl.Framework.Spatial.AttributeDescriptor.DecimalCount" /> &gt; 0).
            Note that some systems use a different notation, e.g. based on precision and scale (rather than length and decimal count). For example:
              </para>
              <list type="table">
              <listheader>
              <term>SQL Server</term>
              <term>XSD</term>
              <term>Attribute Descriptor Length</term>
              <term>Attribute Descriptor DecimalCount</term>
              </listheader>
              <item><term>NUMERIC(10,10)</term><term>totalDigits 10, fractionDigits 10</term><term>11</term><term>10</term></item>
              <item><term>NUMERIC(10,5)</term><term>totalDigits 10, fractionDigits 5</term><term>11</term><term>5</term></item>
              <item><term>NUMERIC(10,0)</term><term>totalDigits 10, fractionDigits 0</term><term>10</term><term>0</term></item>
              </list>
            </remarks>
        </member>
        <member name="P:Gisvl.Framework.Spatial.AttributeDescriptor.Name">
            <summary>
            Gets the field Name.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.AttributeDescriptor.AttributeType">
            <summary>
            Gets the DBase field type.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.AttributeDescriptor.Length">
            <summary>
            Gets the length of the data in bytes.
            </summary>
            <remarks>
              <para>
            The length of an attribute represents the number of bytes used in a DBase file to store the contents of the attribute.
            DBase files use a character encoding for attribute contents, using one byte per character. For example, the length of a 
            <see cref="F:Gisvl.Framework.Spatial.AttributeType.Date" /> field is 8 bytes. For strings composed of ASCII characters,
            the length of an attribute corresponds to the maximum number of ASCII characters in the string.
              </para>
              <para>
            Numeric values are stored in decimal representation in DBase files, using one byte per decimal digit, and one byte for the decimal point (if <see cref="P:Gisvl.Framework.Spatial.AttributeDescriptor.DecimalCount" /> &gt; 0).
            Note that some systems use a different notation, e.g. based on precision and scale (rather than length and decimal count). For example:
              </para>
              <list type="table">
              <listheader>
              <term>SQL Server</term>
              <term>XSD</term>
              <term>Attribute Descriptor Length</term>
              <term>Attribute Descriptor DecimalCount</term>
              </listheader>
              <item><term>NUMERIC(10,10)</term><term>totalDigits 10, fractionDigits 10</term><term>11</term><term>10</term></item>
              <item><term>NUMERIC(10,5)</term><term>totalDigits 10, fractionDigits 5</term><term>11</term><term>5</term></item>
              <item><term>NUMERIC(10,0)</term><term>totalDigits 10, fractionDigits 0</term><term>10</term><term>0</term></item>
              </list>
            </remarks>
        </member>
        <member name="P:Gisvl.Framework.Spatial.AttributeDescriptor.DecimalCount">
            <summary>
            Gets the decimal count for the field, indicating where the decimal separator is.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.AttributeDescriptor.IsMandatory">
            <summary>
            Indicates whether the attribute is mandatory, meaning that it must have a non-null value.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.AttributeDescriptor.GetAttributeType(System.Type)">
            <summary>
            Gets the default <see cref="P:Gisvl.Framework.Spatial.AttributeDescriptor.AttributeType"/> for the given <paramref name="type"/>.
            </summary>
            <param name="type">The CLR type.</param>
            <returns>An <see cref="P:Gisvl.Framework.Spatial.AttributeDescriptor.AttributeType"/>.</returns>
            <remarks>
            The <see cref="P:Gisvl.Framework.Spatial.AttributeDescriptor.AttributeType"/> is chosen for compatibility with DBase III (and ESRI Shape) files.
            </remarks>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> does not have a corresponding DBase type.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.AttributeType">
            <summary>
            Represents a feature attribute type.
            </summary>
            <remarks>
            <para>
            Attribute types are inspired by and compatible with dBase Field types.
            </para>
            </remarks>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.None">
            <summary>
            Undetermined field type.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.Character">
            <summary>
            Fields of type Character store character data up to 255 characters in length.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.Date">
            <summary>
            Field of type Date are 8 bytes wide and store dates.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.DateTime">
            <summary>
            Field of type DateTime store dates with time information.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.Float">
            <summary>
            Field of type Float store floating point numbers.
            </summary>
            <remarks>Only ESRI supports Float in dbf, so it can be read. Internally, it is converted to Number.</remarks>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.Number">
            <summary>
            Fields of type Number store integer or fixed point numbers.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.AttributeType.Logical">
            <summary>
            Fields of type Logical store logical values, i.e. <c>true</c> or <c>false</c>.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DbaseFileHeader">
             <summary>
             Represents the information associated with a DBase header.
             </summary>
             <example>
             <code language = "cs">
              DbaseFileHeader header = new DbaseFileHeader();
            
              header.Fields.Add(new AttributeDescriptor("Character", AttributeType.Character, 10));
              header.Fields.Add(new AttributeDescriptor("Date", AttributeType.Date, 8));
              header.Fields.Add(new AttributeDescriptor("Logical", AttributeType.Logical, 1));
              header.Fields.Add(new AttributeDescriptor("Number", AttributeType.Number, 10));
              
              const string wkt = "POLYGON ((102480.300099881 193359.226172711, 102480.300099881 196811.914390904, 106717.690185845 196811.914390904, 102480.300099881 193359.226172711))";
            
              Feature feature = new Feature(SqlGeometry.STGeomFromText(new SqlChars(new SqlString(wkt)), Srid.Lambert72));
            
              feature.Attributes.Add("Character", "abcdefghij");
              feature.Attributes.Add("Date", new DateTime(2013, 12, 31));
              feature.Attributes.Add("Logical", true);
              feature.Attributes.Add("Number", 123456789);
              
              using (var writer = new ShapefileWriter("test.shp", ShapeGeometryType.Polygon, header))
              {
                  writer.Write(new Feature[] { feature });
              }
             </code> 
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.#ctor">
            <summary>
            Initializes a new instance of the DbaseFileHeader class.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.#ctor(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor})">
            <summary>
            Initializes a new instance of the DbaseFileHeader class.
            </summary>
            <param name="fields">The initial set of field descriptors.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.#ctor(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Initializes a new instance of the DbaseFileHeader class as a stub header.
            </summary>
            <param name="feature">The <see cref="T:Gisvl.Framework.Spatial.Feature"/>.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DbaseFileHeader class from a DBF file.
            </summary>
            <param name="dbaseFilePath">Name of the file, with or without any extension.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.LastUpdateDate">
            <summary>
            Gets the date this file was last updated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.FieldCount">
            <summary>
            Gets the number of fields in the records.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.RecordCount">
            <summary>
            Gets the number of records in the file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.RecordLength">
            <summary>
            Gets the length of the records in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.HeaderLength">
            <summary>
            Gets the length of the header in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileHeader.Fields">
            <summary>
            Gets the fields in the DBase file.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.ReadHeader(System.IO.BinaryReader)">
            <summary>
            Read the header data from the DBF file.
            </summary>
            <param name="reader">BinaryReader containing the header.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Write the header data to the DBF file.
            </summary>
            <param name="writer">The binary writer.</param>
            <exception cref="T:System.ArgumentNullException">writer</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileHeader.OnFieldDescriptorsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the field descriptors collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DbaseFileReader">
            <summary>
            Class that allows records in a DBase file to be enumerated.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DbaseFileReader class.
            </summary>
            <param name="dBaseFilePath">Name of the file with extension.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileReader.Header">
            <summary>
            Gets the header information for the DBase file.
            </summary>
            <returns>DbaseFileHeader contain header and field information.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileReader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileReader.Read(System.IO.BinaryReader)">
            <summary>
            Read a single DBase record
            </summary>
            <returns>
            The read Shapefile record,
             or null if there are no more records.
             </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DbaseFileBaseWriter">
            <summary>
            This class aids in the writing of Dbase IV files.
            </summary>
            <remarks>
            Attribute information of an ESRI Shapefile is written using Dbase IV files.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileBaseWriter.#ctor(System.String,Gisvl.Framework.Spatial.DbaseFileHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DbaseFileBaseWriter"/> class.
            </summary>
            <param name="fileName">Name of the file without extension.</param>
            <param name="header">The header.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileBaseWriter.Write(System.Object[])">
            <summary>
            Write the values.
            </summary>
            <param name="columnValues">The values.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileBaseWriter.FileSize">
            <summary>
            Gets the filesize of current stream.
            </summary>
            <returns>FileSize</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileBaseWriter.Write(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Write a decimal value to the file.
            </summary>
            <param name="number">The value to write.</param>
            <param name="length">The overall width of the column being written to.</param>
            <param name="decimalCount">The number of decimal places in the column.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileBaseWriter.Close">
            <summary>
            Closes the file and updates the number of records written.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DbaseFileWriter">
             <summary>
             A class for writing a DBase file.
             </summary>
             <remarks>
             You can change the DBase filesize limit (default value 1073741824 = 1GB) by setting the value of "DbaseSizeLimit" in the AppSettings of your application.
             </remarks>
             <example>
             <code language = "cs">
             using (SqlConnection connection = new SqlConnection(GetConnectionString()))
             {
                 connection.Open();
            
                 var featureQuery = new FeatureQuery(connection, schema + "." + table, fields.ConvertAll(a => a.Name).ToArray());
            
                 int count;
                 using (DbaseFileWriter target = new DbaseFileWriter(System.IO.Path.Combine(outputMap, "extra", table), new DbaseFileHeader(fields)))
                 {
                     count = target.Write(featureQuery.AsEnumerable());
                 }
             }
            
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileWriter.#ctor(System.String,Gisvl.Framework.Spatial.DbaseFileHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DbaseFileWriter"/> class.
            </summary>
            <param name="dbaseFilePath">Name of the file, with or without any extension</param>
            <param name="header">The <see cref="T:Gisvl.Framework.Spatial.DbaseFileHeader"/> of the file</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileWriter.Header">
            <summary>
            Gets the header of the DBasefile.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DbaseFileWriter.FileNames">
            <summary>
            Gets a list of all filenames written (*.dbf).
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileWriter.Write(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Writes the specified feature collection.
            </summary>
            <param name="featureCollection">The feature collection.</param>
            <returns>The number of features written.</returns>
            <exception cref="T:System.ArgumentNullException">featureCollection</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DbaseFileWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DxfFileHeader">
            <summary>
            Represents a header of a dxf file.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.String)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFilePath">The DXF file template path.</param>
            <remarks>
            The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFilePath">The DXF file template path.</param>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.IO.Stream)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFileStream">The DXF file template stream.</param>
            <remarks>
            The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.IO.Stream,netDxf.Header.DxfVersion)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFileStream">The DXF file template stream.</param>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.String,netDxf.Header.HeaderVariables)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFilePath">The DXF file template path.</param>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.#ctor(System.IO.Stream,netDxf.Header.HeaderVariables)">
            <summary>
            Initalizes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileHeader"/> class.
            </summary>
            <param name="templateFileStream">The DXF file template stream.</param>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.DrawingVariables">
            <summary>
            Gets the dxf <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see>.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.DxfFileVersion">
            <summary>
            Gets the AutoCAD dxf file database version.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.HandleSeed">
            <summary>
            Gets the max handle (HANDLESEED) from header.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.AppRegisterNames">
            <summary>
            Gets the application registered names.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Layers">
            <summary>
            Gets the <see cref="T:netDxf.Tables.Layer">layer</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.LineTypes">
            <summary>
            Gets the <see cref="T:netDxf.Tables.LineType">linetype</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.TextStyles">
            <summary>
            Gets the <see cref="T:netDxf.Tables.TextStyle">text style</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Blocks.Block">block</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.ViewPorts">
            <summary>
            Gets the <see cref="T:netDxf.Tables.ViewPort">viewport</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.DimStyles">
            <summary>
            Gets the <see cref="T:netDxf.Tables.DimensionStyle">dimstyle</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Arcs">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Arc">arcs</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Ellipses">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Ellipse">ellipses</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Circles">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Circle">circles</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Inserts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Insert">inserts</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Lines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Line">lines</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Polylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Polyline">polylines</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.LwPolylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.LwPolyline">light weight polylines</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Points">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Point">points</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Texts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Text">texts</see> list.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileHeader.Groups">
            <summary>
            Gets the <see cref="T:netDxf.Objects.Group">group</see> list.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.LayerExists(System.String)">
            <summary>
            Checks if a layer exists in the dictionary.
            </summary>
            <param name="layerName"><see cref="T:netDxf.Tables.Layer">Layer</see> name.</param>
            <returns>True if layer exists, otherwise false.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.BlockExists(System.String)">
            <summary>
            Checks if a block exists in the dictionary.
            </summary>
            <param name="blockName"><see cref="T:netDxf.Blocks.Block">Block</see> name.</param>
            <returns>True if block exists, otherwise false.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.GetLayer(System.String)">
            <summary>
            Gets a layer from the dictionary.
            </summary>
            <param name="layerName"><see cref="T:netDxf.Tables.Layer">Layer</see> name.</param>
            <returns>Layer with the actual name, null if it does not exists.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileHeader.GetBlock(System.String)">
            <summary>
            Gets a block from the dictionary.
            </summary>
            <param name="blockName"><see cref="T:netDxf.Blocks.Block">Block</see> name.</param>
            <returns>Block with the actual name, null if it does not exists.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DxfFileReader">
            <summary>
            Provides methods to load features in memory from a DXF file (R10, R11, R12, R13, R14, 2000, 2004, 2007, 2010). This class provides extra methods than the static one provided in the <see cref="T:Gisvl.Framework.Spatial.FeatureLoader"/> class.
            </summary>
            <example>
            <code language = "cs">
             DxfFileReader reader = new DxfFileReader(fileName);
             var features = reader.GetFeatures(layer);
            </code>
            </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileReader"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <exception cref="T:System.ArgumentNullException">fileName</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileReader.GetFeatures(System.String)">
            <summary>
            Gets the features.
            </summary>
            <param name="layer">The DXF layer, or <c>null</c> to read from all layers.</param>
            <returns>A sequence of features.</returns>
            <remarks>
            The following entities are returned: points, lwpolylines, polylines, lines, circles, arcs, ellipses, texts and inserts. 
            Closed entities are treated as SqlGeometry polygons, otherwise as SqlGeometry linestrings. 
            Since SqlGeometry can not handle circles, arcs and ellipses, they are approached with a precision of 128 line segments for a full circle. 
            For texts, features (points) will be returned having the text value stored in an attribute "dxfText". 
            For inserts, features (points) will be returned having the insert block name stored in an attribute "dxfBlock". 
            </remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.DxfFileWriter">
             <summary>
             A class for writing a DXF2000 file.
             </summary>
             <remarks>
             You can change the DXF filesize limit (default value is 200 MB) by setting the value of "DxfSizeLimit" in the AppSettings of your application.
             </remarks>
             <example>
             <code language = "cs">
              var gbg = FeatureLoader.FromShape(Path.Combine(inputMap, "gbg.shp")).ToList();
              var gvl = FeatureLoader.FromShape(Path.Combine(inputMap, "gvl.shp")).ToList();
            
              const string layerName = "layer";
            
              DxfFileWriter target = new DxfFileWriter("combined.dxf", Path.Combine(outpuMap, "cad2000template.dxf"));
            
              using (target)
              {
                  target.Write(gbg, layerName);
                  target.Write(gvl, layerName);
              }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.#ctor(System.String,Gisvl.Framework.Spatial.DxfFileHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.DxfFileWriter"/> class.
            </summary>
            <param name="dxfFilePath">Name of the file, with or without any extension.</param>
            <param name="header">The DXF file template path.</param>
            <exception cref="T:System.ArgumentNullException">
            dxfFilePath
            or
            dxfFileTemplatePath
            </exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.DxfFileWriter.FileNames">
            <summary>
            Gets a list of all filenames written (*.dxf), after the <see cref="T:Gisvl.Framework.Spatial.DxfFileWriter"/> is disposed.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.Write(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.String)">
            <summary>
            Writes the geometries in the specified feature collection.
            </summary>
            <param name="featureCollection">The feature collection.</param>
            <param name="layer">The DXF layer.</param>
            <returns>
            Number of features written.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="featureCollection" /> is <c>null</c> or <paramref name="layer" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">layer 'layer' does not exist in header</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.WriteTexts(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.String,System.Func{Gisvl.Framework.Spatial.Feature,System.String},System.Double,System.Double,Gisvl.Framework.Spatial.TextAlignment)">
             <summary>
             Writes text labels for the features in the specified feature collection.
             </summary>
             <param name="featureCollection">The feature collection.</param>
             <param name="layer">The DXF layer.</param>
             <param name="textSelector">The text selector.</param>
             <param name="textSize">Size of the text.</param>
             <param name="textOffset">The text perpendicular offset from the center.</param>
             <param name="textAlignment">The text alignment.</param>
             <returns>The number of texts written</returns>
             <remarks>
             In general text labels are placed at the center of each geometry. 
             For multilinestrings text labels are placed at the center of the longest line. 
             For multipoints text labels are placed at the point closest to the center of gravitation. 
             For multipolygons and polygons text labels are placed at the centroid or at a point inside the geometry.
             </remarks>
             <exception cref="T:System.ArgumentNullException"><paramref name="featureCollection" /> is <c>null</c> or <paramref name="layer" /> is <c>null</c> or <paramref name="textSelector" /> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">layer 'layer' does not exist in header</exception>
             <example>
             <code language = "cs">
             var features = FeatureLoader.FromShape(Path.Combine(inpuMap, "adp.shp")).ToList();
            
             const string layerName = "layer";
            
             DxfFileWriter target = new DxfFileWriter("texts.dxf", Path.Combine(outputMap, "cad2000template.dxf"));
            
             using (target)
             {
                 target.WriteTexts(features, layerName, feature => feature.Attributes["CAPAKEY"].ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.WriteInserts(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature},System.String,System.Func{Gisvl.Framework.Spatial.Feature,System.String})">
             <summary>
             Writes inserts of blocks for the features in the specified feature collection.
             </summary>
             <param name="featureCollection">The feature collection.</param>
             <param name="layer">The DXF layer.</param>
             <param name="insertSelector">The insert name selector.</param>
             <returns>Number of inserts made</returns>
             <remarks>
             In general blocks are placed at the center of each geometry. 
             For multilinestrings blocks are placed at the center of the longest line. 
             For multipoints blocks are placed at the point closest to the center of gravitation. 
             For multipolygons and polygons blocks are placed at the centroid or at a point inside the geometry.
             </remarks>
             <exception cref="T:System.ArgumentNullException"><paramref name="featureCollection" /> is <c>null</c> or <paramref name="layer" /> is <c>null</c> or <paramref name="insertSelector" /> is <c>null</c>.</exception>
             <exception cref="T:System.ArgumentException">layer 'layer' does not exist in header</exception>
             <example>
             <code language = "cs">
             var features = FeatureLoader.FromShape(Path.Combine(inpuMap, "wpi.shp")).ToList();
            
             const string layerName = "layer";
            
             DxfFileWriter target = new DxfFileWriter("inserts.dxf", Path.Combine(outputMap, "cad2000template.dxf"));
            
             using (target)
             {
                 target.WriteInserts(features, layerName, feature => feature.Attributes["BLOCKNAME"].ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.WriteEntity(netDxf.Entities.EntityObject)">
            <summary>
            Writes an <see cref="T:netDxf.Entities.EntityObject">entity</see> to a file. This method is used to write large files, without saving entities in memory.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see> to write to a file.</param>
            <returns>
            True if the entity has been added to the file, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">entity;The entity cannot be null.</exception>
            <remarks>
            A unique handle identifier is assigned to every entity. The entity is written immediately to a file.
            </remarks>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.DxfFileWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.TextAlignment">
            <summary>
            Defines the text alignment for writing DXF2000 files.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.None">
            <summary>
            Unspecified text alignment.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BaselineLeft">
            <summary>
            Baseline left.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BaselineCenter">
            <summary>
            Baseline center.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.BaselineRight">
            <summary>
            Baseline right.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.Aligned">
            <summary>
            Aligned (if vertical alignment = 0).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.Middle">
            <summary>
            Middle (if vertical alignment = 0)
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.TextAlignment.Fit">
            <summary>
            Fit (if vertical alignment = 0)
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.KmlStyleMap">
            <summary>
            Maps between two different Styles.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyleMap.#ctor(System.String,Gisvl.Framework.Spatial.KmlStyle,Gisvl.Framework.Spatial.KmlStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.KmlStyleMap" /> class.
            </summary>
            <param name="name">The name or ID of the style map.</param>
            <param name="styleNormal">The normal style for a placemark.</param>
            <param name="styleHighlight">The highlighted style for a placemark, so that the highlighted version appears when the user mouses over the icon</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleMap.Name">
            <summary>
            Gets the field Name.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleMap.StyleNormal">
            <summary>
            Gets the normal style.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleMap.StyleHighlight">
            <summary>
            Gets the highlight style.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyleMap.ToKml">
            <summary>
            Writes the Style map in valid GML.
            </summary>
            <returns>
            An XElement of the style.
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.KmlStyle">
            <summary>
            Represents the style information associated with a Placemark.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.KmlStyle" /> class.
            </summary>
            <param name="name">The name or ID of the style.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyle.Name">
            <summary>
            Gets the field Name.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyle.Items">
            <summary>
            Gets the style items.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyle.ToKml">
            <summary>
            Writes the Style in valid KML.
            </summary>
            <returns>
            An XElement of the style.
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Kml2FileWriter">
             <summary>
             A class for writing a KML 2 file.
             </summary>
             <example>
             <code language = "cs">
              var features = FeatureLoader.FromShape("gbg.shp").Index();
              DbaseFileHeader header = new DbaseFileHeader("gbg.dbf");
            
              // write the files
              using (var writer = new Kml2FileWriter("outfile.kml", header.Fields, features.Extent))
              {
                  writer.PlacemarkNameSelector = (f => f.Attributes["STRAATNM"] as string);
                  writer.Snippet = "Snippet";
                  writer.Description = "Description";
                  writer.AltitudeMode = KmlAltitudeType.relativeToGround;
                  KmlStyle s1 = new KmlStyle("style1");
                  s1.Items.Add(new KmlStyleDescriptor(KmlStyleType.PolyStyle, "ffff00ff"));
                  s1.Items.Add(new KmlStyleDescriptor(KmlStyleType.LabelStyle, "ff0000ff"));
                  writer.Styles.Add(s1);
                  KmlStyle s2 = new KmlStyle("style2");
                  s2.Items.Add(new KmlStyleDescriptor(KmlStyleType.BalloonStyle, "ff6600ff"));
                  s2.Items.Add(new KmlStyleDescriptor(KmlStyleType.LineStyle, "ff4400ff"));
                  writer.Styles.Add(s2);
                  writer.PlacemarkStyleSelector = (f => (double)f.Attributes["HN_P99"] > 5.0 ? "style1" : "style2");
                  writer.Write(features);
              }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Kml2FileWriter"/> class.
            </summary>
            <param name="kmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor},Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Kml2FileWriter" /> class with a given source spatial-reference ID.
            </summary>
            <param name="kmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
            <param name="srid">A spatial-reference ID.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="kmlFilePath"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.Extrude">
            <summary>
            Gets or sets whether to connect the feature's geometry to the ground.
            </summary>
            <value>
            True if geometry will be extruded to ground, false is not. Default is true.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.AltitudeMode">
            <summary>
            Gets or sets they way altitude components in the coordinates element are interpreted.
            </summary>
            <value>
            The altitude type. Default is clampToGround.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.Description">
            <summary>
            Gets or sets the description of the file.
            </summary>
            <value>
            The description of the file.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.Snippet">
            <summary>
            Gets or sets the snippet of the file.
            </summary>
            <value>
            The snippet info of the file.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.PlacemarkNameSelector">
            <summary>
            Gets or sets the function to use for giving placemarks a name.
            </summary>
            <value>
            The function to use for giving placemarks a name.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.PlacemarkStyleSelector">
            <summary>
            Gets or sets the function to use for giving placemarks a style.
            </summary>
            <value>
            The function to use for giving placemarks a style.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.Styles">
            <summary>
            Gets or sets the different styles for placemarks, not defined in stylemaps.
            </summary>
            <value>
            The styles for placemarks.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.StyleMaps">
            <summary>
            Gets or sets the different style maps for styles.
            </summary>
            <value>
            The stylemaps for styles.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.Kml2FileWriter.DefaultExtension">
            <summary>
            Gets the default extension.
            </summary>
            <value>
            The default extension.
            </value>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.WriteHeader">
            <summary>
            Writes the header.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.FixExtent(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.Write(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>
            1 if feature is written, otherwise 0.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.WriteTrailer">
            <summary>
            Writes the trailer.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Kml2FileWriter.WriteXsd">
            <summary>
            Writes the XSD. Nothing to do for KML.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.KmlStyleDescriptor">
            <summary>
            Represents the style information associated with a Placemark.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyleDescriptor.#ctor(Gisvl.Framework.Spatial.KmlStyleType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.KmlStyleDescriptor" /> class.
            </summary>
            <param name="styleType">Type of the style.</param>
            <param name="color">The color in hexadecimal notation.</param>
            <exception cref="T:System.ArgumentException">Invalid color;color</exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.StyleType">
            <summary>
            Gets the style type.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.Color">
            <summary>
            Gets the color of the style in hexadecimal notation. 
            The order of expression is aabbggrr, where aa=alpha (00 to ff); bb=blue (00 to ff); gg=green (00 to ff); rr=red (00 to ff).
            The range of values for any one color is 0 to 255 (00 to ff). For alpha, 00 is fully transparent and ff is fully opaque. 
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.ColorRandom">
            <summary>
            Gets or sets the colormode of the color, random (true) or normal (false). Default is false.
            A value of random applies a random linear scale to the base color as follows:
            -To achieve a truly random selection of colors, specify a base color of white (ffffffff). 
            -If you specify a single color component (for example, a value of ff0000ff for red), random color values for that one component (red) will be selected.
            In this case, the values would range from 00 (black) to ff (full red). 
            -If you specify values for two or for all three color components, a random linear scale is applied to each color component, 
            with results ranging from black to the maximum values specified for each component.
            -The opacity of a color comes from the alpha component of color and is never randomized. 
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.Fill">
            <summary>
            Indicates for polystyle if the polygon needs to be filled. Default is true.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.Outline">
            <summary>
            Indicates for polystyle if the polygon needs to be outlined. Default is true.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.Width">
            <summary>
            Gets or sets for linestyle the width of the line. Default is 1.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.Scale">
            <summary>
            Gets or sets for labelstyle or iconstyle the scale of the label. Default is 1.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.KmlStyleDescriptor.IconRef">
            <summary>
            Gets or sets for iconstyle the HTTP address or a local file specification used to load an icon. Default is none.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.KmlStyleDescriptor.ToKml">
            <summary>
            Writes the Style in valid KML.
            </summary>
            <returns>
            An XElement of the style.
            </returns>
            <exception cref="T:System.NotSupportedException">The style is not a valid StyleType.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.KmlStyleType">
            <summary>
            Represents a style type in KML files.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlStyleType.BalloonStyle">
            <summary>
            Description balloon for Placemarks.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlStyleType.IconStyle">
            <summary>
            Icons for point Placemarks. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlStyleType.LabelStyle">
            <summary>
            Way of representing the name of a Feature. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlStyleType.LineStyle">
            <summary>
            Drawing style (color, color mode, and line width) for all line geometry. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlStyleType.PolyStyle">
            <summary>
            Drawing style for all polygons, including polygon extrusions (which look like the walls of buildings) and line extrusions (which look like solid fences). 
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.KmlAltitudeType">
            <summary>
            Represents an altitude mode for coordinates in KML files.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlAltitudeType.clampToGround">
            <summary>
            Indicates to ignore an altitude specification.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlAltitudeType.relativeToGround">
            <summary>
            Sets the altitude of the element relative to the actual ground elevation of a particular location. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.KmlAltitudeType.absolute">
            <summary>
            Sets the altitude of the coordinate relative to sea level, regardless of the actual elevation of the terrain beneath the element. 
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Range">
            <summary>
            Represents an integer range.
            </summary>
            <remarks>
            Mutable struct for performance reasons. Do not try this at home, kids!
            </remarks>
        </member>
        <member name="T:Gisvl.Framework.Spatial.GeoJsonWriter">
            <summary>
            Provides methods to convert geometries to GeoJSON.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.ToGeoJsonString(Microsoft.SqlServer.Types.SqlGeometry,System.Boolean)">
            <summary>
            Converts a geometry to a GeoJSON string.
            </summary>
            <param name="geometry">The geometry to convert.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <returns>A JSON string representing the geometry.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.ToGeoJsonString(Microsoft.SqlServer.Types.SqlGeography,System.Boolean)">
            <summary>
            Converts a geography to a GeoJSON string.
            </summary>
            <param name="geography">The geography to convert.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <returns>A JSON string representing the geography.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.WriteGeoJson(Microsoft.SqlServer.Types.SqlGeometry,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a geometry to a stream in GeoJSON format.
            </summary>
            <param name="geometry">The geometry to write.</param>
            <param name="stream">The stream to write to.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="geometry"/> is <c>null</c> or <paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.WriteGeoJson(Microsoft.SqlServer.Types.SqlGeography,System.IO.Stream,System.Boolean)">
            <summary>
            Writes a geography to a stream in GeoJSON format.
            </summary>
            <param name="geography">The geography to write.</param>
            <param name="stream">The stream to write to.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/>geography is <c>null</c> or <paramref name="stream"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.WriteGeoJson(Microsoft.SqlServer.Types.SqlGeometry,System.IO.TextWriter,System.Boolean)">
            <summary>
            Writes a geometry to a text writer in GeoJSON format.
            </summary>
            <param name="geometry">The geometry to write.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="geometry"/> is <c>null</c> or <paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.WriteGeoJson(Microsoft.SqlServer.Types.SqlGeography,System.IO.TextWriter,System.Boolean)">
            <summary>
            Writes a geography to a text writer in GeoJSON format.
            </summary>
            <param name="geography">The geography to write.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="isCrsRequired">A value indicating whether the SRID should be serialized or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c> or <paramref name="writer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.ToGeoJsonObject(Microsoft.SqlServer.Types.SqlGeometry,System.Boolean)">
            <summary>
            Converts a geometry to an object that is serializable using JSON.Net.
            </summary>
            <param name="geometry">The geometry to serialize.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <returns>An object that is serializable using JSON.Net.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geometry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GeoJsonWriter.ToGeoJsonObject(Microsoft.SqlServer.Types.SqlGeography,System.Boolean)">
            <summary>
            Converts a geography to an object that is serializable using JSON.Net.
            </summary>
            <param name="geography">The geography to serialize.</param>
            <param name="isCrsRequired">A value indicating whether the spatial-reference ID should be serialized or not.</param>
            <returns>An object that is serializable using JSON.Net.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="geography"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.XmlFileWriter">
             <summary>
             A class for writing an XML file.
             </summary>
             <example>
             <code language = "cs">
              var features = FeatureLoader.FromShape("gbg.shp").Index();
              DbaseFileHeader header = new DbaseFileHeader("gbg.dbf");
            
              // write the files
              using (var writer = new XmlFileWriter("outfile.xml", header.Fields))
              {
                  writer.Write(features);
              }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.XmlFileWriter"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.WriteHeader">
            <summary>
            Writes the header.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.Write(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>
            1 if feature is written, otherwise 0.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.WriteTrailer">
            <summary>
            Writes the trailer.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.WriteXsd">
            <summary>
            Writes the XSD.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriter.FixExtent(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Gml3FileWriter">
             <summary>
             A class for writing a GML 3 file.
             </summary>
             <example>
             <code language = "cs">
              var features = FeatureLoader.FromShape("gbg.shp").Index();
              DbaseFileHeader header = new DbaseFileHeader("gbg.dbf");
            
              // write the files
              using (var writer = new Gml3FileWriter("outfile.gml", header.Fields, features.Extent))
              {
                  writer.Write(features);
              }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Gml3FileWriter" /> class with spatial-reference ID 31370 (Belgian Lambert 1972).
            </summary>
            <param name="gmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor},Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Gml3FileWriter" /> class with a given spatial-reference ID.
            </summary>
            <param name="gmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
            <param name="srid">A spatial-reference ID.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="gmlFilePath"/> is <c>null</c></exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.WriteHeader">
            <summary>
            Writes the header.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.FixExtent(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.Write(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>
            1 if feature is written, otherwise 0.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.WriteTrailer">
            <summary>
            Writes the trailer.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml3FileWriter.WriteXsd">
            <summary>
            Writes the XSD.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.GmlFileWriterBase">
            <summary>
            Base class for writing GML-files, based on XmlFileWriterBase class.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GmlFileWriterBase.Srid">
            <summary>
            Gets the spatial-reference ID.
            </summary>
            <value>
            The spatial-reference ID.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GmlFileWriterBase.GeometryTypes">
            <summary>
            Gets the geometry types.
            </summary>
            <value>
            The geometry types.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.GmlFileWriterBase.DefaultExtension">
            <summary>
            Gets the default extension.
            </summary>
            <value>
            The default extension.
            </value>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GmlFileWriterBase.ValidateFeature(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Validates the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <exception cref="T:System.ArgumentException">All features must have the same spatial reference identifier.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.GmlFileWriterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.XmlFileWriterBase">
            <summary>
            Provides a base class for writing XML-based files, including GML and KML.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.FeatureName">
            <summary>
            Gets the name of the feature.
            </summary>
            <value>
            The name of the feature.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.DefaultExtension">
            <summary>
            Gets the default extension.
            </summary>
            <value>
            The default extension.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.Writer">
            <summary>
            Gets the writer.
            </summary>
            <value>
            The writer.
            </value>
        </member>
        <member name="P:Gisvl.Framework.Spatial.XmlFileWriterBase.FullExtent">
            <summary>
            Stores the full extent of the features in this xml file.
            gets expanded when features are being written.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.Write(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Writes the specified features.
            </summary>
            <param name="features">The features.</param>
            <returns>Number of features written.</returns>
            <exception cref="T:System.ArgumentNullException">features is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">All features must have the same spatial reference identifier.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.WriteHeader">
            <summary>
            Writes the header.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.ValidateFeature(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Validates the specified feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.Write(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>1 if feature is written, otherwise 0.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.WriteTrailer">
            <summary>
            Writes the trailer.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.WriteXsd">
            <summary>
            Writes the XSD.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.FixExtent(System.String)">
            <summary>
            Fix header with the 
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.WriteFields(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the fields.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.GetEpsgCode(Gisvl.Framework.Spatial.Srid)">
            <summary>
            Gets the EPSG code for the given spatial-reference ID.
            </summary>
            <param name="srid">The spatial-reference ID.</param>
            <returns>The EPSG code.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.XmlFileWriterBase.GetXsdFieldDescriptor(Gisvl.Framework.Spatial.AttributeDescriptor)">
            <summary>
            Gets the XSD field descriptor.
            </summary>
            <param name="field">The field.</param>
            <returns>The XSD field descriptor.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Gml2FileWriter">
             <summary>
             A class for writing a GML 2 file.
             </summary>
             <example>
             <code language = "cs">
              var features = FeatureLoader.FromShape("gbg.shp").Index();
              DbaseFileHeader header = new DbaseFileHeader("gbg.dbf");
            
              // write the files
              using (var writer = new Gml2FileWriter("outfile.gml", header.Fields, features.Extent))
              {
                  writer.Write(features);
              }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Gml2FileWriter"/> class.
            </summary>
            <param name="gmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.#ctor(System.String,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.AttributeDescriptor},Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.Gml2FileWriter" /> class with a given spatial-reference ID.
            </summary>
            <param name="gmlFilePath">Name of the file, with or without any extension.</param>
            <param name="fields">The fields.</param>
            <param name="srid">A spatial-reference ID.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="gmlFilePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.WriteHeader">
            <summary>
            Writes the header.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.FixExtent(System.String)">
            <summary>
            Is called after disposing.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.Write(Gisvl.Framework.Spatial.Feature)">
            <summary>
            Writes the specified feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns>
            1 if feature is written, otherwise 0.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.WriteTrailer">
            <summary>
            Writes the trailer.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Gml2FileWriter.WriteXsd">
            <summary>
            Writes the XSD.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.MultiLineHandler">
            <summary>
            Converts a Shapefile line/multiline to a OGIS line/multiLine.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.MultiLineHandler.Read(System.IO.BinaryReader,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Reads a stream and converts the Shapefile record to an equivalent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The geometry object that represents the Shapefile record.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.MultiLineHandler.Write(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter)">
            <summary>
            Writes to the given stream the equivalent Shapefile record given a geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="shapeType">Type of the Shapefile being written.</param>
            <param name="fullExtent">The full extent for the Shapefile being written, to be updated as needed.</param>
            <param name="file">The stream to write to.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.MultiLineHandler.GetLength(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Gets the length in 16 bit words the geometry will need when written as a Shapefile record.
            </summary>
            <param name="geometry">The geometry object to use.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <returns>
            The length in 16bit words the geometry will use when represented as a Shapefile record.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.MultiLineHandler.MakeValid(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Will create a valid geometry from a linestring, multilinestring, or a geometry collection of linestrings.
            </summary>
            <param name="sqlGeometry">The geometry to make valid.</param>
            <param name="geometryFactory">The <see cref="T:Gisvl.Framework.Spatial.GeometryFactory"/>.</param>
            <returns>A valid geometry.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.NonDisposingStream">
            <summary>
            Provide a workaround for the lack of a non-disposing BinaryReader constructor in .NET 4.0.
            </summary>
            <remarks>
            Can be removed when converted to .NET 4.5.
            </remarks>
        </member>
        <member name="F:Gisvl.Framework.Spatial.NonDisposingStream.stream">
            <summary>
            Stores the wrapped stream.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.NonDisposingStream"/> class.
            </summary>
            <param name="stream">The stream to be wrapped.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.NonDisposingStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.NonDisposingStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.NonDisposingStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.NonDisposingStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Gisvl.Framework.Spatial.NonDisposingStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.NonDisposingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.PointHandler">
            <summary>
            Converts a Shapefile point to a OGIS point.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PointHandler.Read(System.IO.BinaryReader,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Reads a stream and converts the Shapefile record to an equivalent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The geometry object that represents the Shapefile record.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PointHandler.Write(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter)">
            <summary>
            Writes to the given stream the equivalent Shapefile record given a geometry object.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <param name="fullExtent">The full extent for the Shapefile being written, to be updated as needed.</param>
            <param name="file">The stream to write to.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PointHandler.GetLength(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Gets the length in 16 bit words the geometry will need when written as a Shapefile record.
            </summary>
            <param name="geometry">The geometry object to use.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <returns>
            The length in 16bit words the geometry will use when represented as a Shapefile record.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PointHandler.MakeValid(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Will create a valid geometry from a point or multipoint.
            </summary>
            <param name="sqlGeometry">The geometry to make valid.</param>
            <param name="geometryFactory">The <see cref="T:Gisvl.Framework.Spatial.GeometryFactory"/>.</param>
            <returns>A valid geometry.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.PolygonHandler">
            <summary>
            Converts a Shapefile point to a OGIS polygon.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.Read(System.IO.BinaryReader,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Reads a stream and converts the Shapefile record to an equivalent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>
            The geometry object that represents the Shapefile record.
            </returns>
            <exception cref="T:System.ApplicationException">Attempting to load a non-polygon as polygon.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.Write(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter)">
            <summary>
            Writes a geometry to the given binary writer.
            </summary>
            <param name="geometry">The geometry to write.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <param name="fullExtent">The full extent for the Shapefile being written, to be updated as needed.</param>
            <param name="file">The file stream to write to.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.GetLength(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Gets the length in 16 bit words the geometry will need when written as a Shapefile record.
            </summary>
            <param name="geometry">The geometry to get the length for.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <returns>
            The length in 16bit words the geometry will use when represented as a Shapefile record.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.MakeValid(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Will create a valid geometry from a polygon, multipolygon, or a geometry collection of polygons.
            </summary>
            <param name="sqlGeometry">The geometry to make valid.</param>
            <param name="geometryFactory">The <see cref="T:Gisvl.Framework.Spatial.GeometryFactory"/>.</param>
            <returns>A valid geometry.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.GetNumParts(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Gets the number of interior and exterior parts of a polygon.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>The number of parts.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.PolygonHandler.IsPointInList(Gisvl.Framework.Spatial.Coordinate,Gisvl.Framework.Spatial.Coordinate[])">
            <summary>
            Test if a point is in a list of coordinates.
            </summary>
            <param name="testPoint">TestPoint the point to test for.</param>
            <param name="pointList">PointList the list of points to look through.</param>
            <returns>true if testPoint is a point in the pointList list.</returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapeHandler">
            <summary>
            Abstract class that defines the interfaces that other 'Shape' handlers must implement.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.GetShapeHandler(Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Returns the appropriate class to convert a shape record to an OGIS geometry given the type of shape.
            </summary>
            <param name="type">The Shapefile type.</param>
            <returns>An instance of the appropriate handler to convert the shape record to a geometry object.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.Read(System.IO.BinaryReader,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Reads a stream and converts the Shapefile record to an equivalent geometry object.
            </summary>
            <param name="file">The stream to read.</param>
            <param name="geometryFactory">The geometry factory to use when making the object.</param>
            <returns>The geometry object that represents the Shapefile record.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.Write(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter)">
            <summary>
            Writes the given geometry object to the given Shapefile.
            </summary>
            <param name="geometry">The geometry object to write.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <param name="fullExtent">The full extent for the Shapefile being written, to be updated as needed.</param>
            <param name="file">The stream to write to.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.GetLength(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Gets the length in 16 bit words the geometry will need when written as a Shapefile record.
            </summary>
            <param name="geometry">The geometry object to use.</param>
            <param name="shapeType">Type of the geometry of the Shapefile being written.</param>
            <returns>The length in 16bit words the geometry will use when represented as a Shapefile record.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.MakeValid(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.GeometryFactory)">
            <summary>
            Will create a geometry that matches the handler.
            </summary>
            <param name="sqlGeometry">The geometry.</param>
            <param name="geometryFactory">The geometry factory to use.</param>
            <returns>A valid geometry.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.HasZValue(Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Determines whether the specified shape type has a Z value.
            </summary>
            <param name="shapeType">The shape type.</param>
            <returns>
              <c>true</c> if the specified shape type has a Z value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.HasMValue(Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Determines whether the specified shape type has an M value.
            </summary>
            <param name="shapeType">The shape type.</param>
            <returns>
              <c>true</c> if the specified shape type has an M value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.WriteCoordinates(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Coordinate},Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter)">
            <summary>
            Writes the coordinates to a file.
            </summary>
            <param name="points">The points.</param>
            <param name="fullExtent">The full extent.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.WriteZAndMValues(Microsoft.SqlServer.Types.SqlGeometry,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.FullExtent,System.IO.BinaryWriter,System.Int32,System.Int32)">
            <summary>
            Writes the Z and M values to a file.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="shapeType">Type of the geometry of the shape.</param>
            <param name="fullExtent">The full extent.</param>
            <param name="file">The file.</param>
            <param name="numPoints">The number of points.</param>
            <param name="numParts">The number of parts.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapeHandler.GrabZMValues(System.IO.BinaryReader,Gisvl.Framework.Spatial.ShapeGeometryType,System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{Gisvl.Framework.Spatial.Coordinate}})">
            <summary>
            Grabs the ZM values from a file.
            </summary>
            <param name="file">The file.</param>
            <param name="shapeType">Type of the geometry of the shape.</param>
            <param name="lines">The lines.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapefileWriter">
             <summary>
             A class for writing a complete (SHP, SHX and DBF) Shapefile structure.
             </summary>
             <remarks>
             You can change the Shapefile filesize limit (default value 1073741824 = 1GB) by setting the value of "ShapeSizeLimit" in the AppSettings of your application.
             </remarks>
             <example>
             <code language = "cs">
              SqlGeometry geometry = SqlGeometry.STGeomFromText(new System.Data.SqlTypes.SqlChars(new System.Data.SqlTypes.SqlString(wkt)), srid);
            
              var featureQuery = from f in new FeatureQuery(connection, schema + "." + featureClass, fields.ConvertAll(a => a.Name).ToArray()).WithGeometryColumn("SHAPE")
                                 where f.Geometry.Filter(geometry).Value
                                 select f;
            
              features = featureQuery.AsEnumerable();
            
              if (clip)
              {
                  features = features.ClipWhereIntersects(geometry);
              }
              else
              {
                  features = features.WhereIntersects(geometry);
              }
            
              int count;
              using (ShapefileWriter target = new ShapefileWriter(System.IO.Path.Combine(outputMap, outFeatureClass), geometryType.GetShapeGeometryType(), new DbaseFileHeader(fields)))
              {
                  count = target.Write(features);
              }
            
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileWriter.#ctor(System.String,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.DbaseFileHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileWriter" /> class with spatial-reference ID 31370 (Belgian Lambert 1972).
            </summary>
            <param name="shapeFilePath">Name of the file, with or without any extension.</param>
            <param name="shapeGeometryType">The geometry type of the Shapefile according to <see cref="T:Gisvl.Framework.Spatial.ShapeGeometryType" />.</param>
            <param name="header">The <see cref="T:Gisvl.Framework.Spatial.DbaseFileHeader"/> of the DBF file</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileWriter.#ctor(System.String,Gisvl.Framework.Spatial.Srid,Gisvl.Framework.Spatial.ShapeGeometryType,Gisvl.Framework.Spatial.DbaseFileHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileWriter"/> class with a given spatial-reference ID.
            </summary>
            <param name="shapeFilePath">Name of the file, with or without any extension.</param>
            <param name="srid">A spatial-reference ID.</param>
            <param name="shapeGeometryType">The geometry type of the Shapefile according to <see cref="T:Gisvl.Framework.Spatial.ShapeGeometryType"/>.</param>
            <param name="header">The <see cref="T:Gisvl.Framework.Spatial.DbaseFileHeader"/> of the DBF file</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.ShapefileWriter.Header">
            <summary>
            Gets the header of the DBF file of the Shapefile.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.ShapefileWriter.FileNames">
            <summary>
            Gets a list of all filenames written (*.shp).
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileWriter.Write(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Writes the specified feature collection.
            </summary>
            <param name="featureCollection">The feature collection.</param>
            <returns>Number of features written.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileWriter.Dispose">
            <summary>
            Closes the files.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapefileHeader">
            <summary>
            Class that represents a Shapefile header record.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileHeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileHeader"/> class with values read in from the stream.
            </summary>
            <param name="shpBinaryReader">BinaryReader to the Shapefile.</param>
            <exception cref="T:System.ArgumentNullException">shpBinaryReader is null</exception>
            <exception cref="T:System.FormatException">The first four bytes of this file indicate this is not a Shapefile.</exception>
            <exception cref="T:System.NotSupportedException">Shapefile format version is not supported.</exception>
            <remarks>
            Reads the header information from the stream.
            </remarks>
        </member>
        <member name="P:Gisvl.Framework.Spatial.ShapefileHeader.ShapeType">
            <summary>
            Gets the Shapefile type i.e. polygon, point etc...
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileHeader.WriteTemporaryHeader(System.IO.BinaryWriter,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Writes the temporary header, which will be filled in correctly while closing the file.
            </summary>
            <param name="writer">The writer.</param>
            <param name="shapeGeometryType">The geometry type of the Shapefile according to <see cref="T:Gisvl.Framework.Spatial.ShapeGeometryType"/>.</param>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapefileReader">
            <summary>
            This class helps the reading of a ESRI Shapefile.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileReader.#ctor(System.IO.Stream,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileReader"/> class with the given parameters.
            </summary>
            <param name="stream">The shp stream.</param>
            <param name="srid">A spatial-reference ID.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileReader.#ctor(System.String,Gisvl.Framework.Spatial.Srid)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileReader"/> class with the given parameters.
            </summary>
            <param name="shapeFilePath">Name of the file with extension.</param>
            <param name="srid">A spatial-reference ID.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileReader.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.FormatException">The file is not a valid shape file.</exception>
            <exception cref="T:System.NotSupportedException">Shapefile format version is not supported.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapefileBaseWriter">
            <summary>
            This class writes ESRI Shapefiles.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapefileBaseWriter.position">
            <summary>
            Current position in the file in word (16 bit) units.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileBaseWriter.#ctor(System.String,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileBaseWriter" /> class
            </summary>
            <param name="fileName">Name of the file without extension.></param>
            <param name="shapeGeometryType">The geometry type of the Shapefile according to <see cref="T:Gisvl.Framework.Spatial.ShapeGeometryType"/>.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileBaseWriter.#ctor(System.IO.Stream,System.IO.Stream,Gisvl.Framework.Spatial.ShapeGeometryType)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.ShapefileBaseWriter" /> class
            </summary>
            <param name="shpStream">The shp stream.</param>
            <param name="shxStream">The shx stream.</param>
            <param name="shapeGeometryType">The geometry type of the Shapefile according to <see cref="T:Gisvl.Framework.Spatial.ShapeGeometryType" />.</param>
        </member>
        <member name="P:Gisvl.Framework.Spatial.ShapefileBaseWriter.FileSize">
            <summary>
            Gets the filesize of current shape stream.
            </summary>
            <returns>Filesize in bytes.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileBaseWriter.Write(Microsoft.SqlServer.Types.SqlGeometry)">
            <summary>
            Writes a geometry to Shapefile
            </summary>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileBaseWriter.Close">
            <summary>
            Closes the files.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.ShapefileBaseWriter.Dispose">
            <summary>
            CLoses the files.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.ShapeGeometryType">
            <summary>
            Geometry type enumeration of a Shapefile.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.NullShape">
            <summary>
            Null Shape
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.LineString">
            <summary>
            LineString
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.MultiPoint">
            <summary>
            MultiPoint
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PointZ">
            <summary>
            PointZ
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.LineStringZ">
            <summary>
            LineStringZ
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PointZM">
            <summary>
            PointZM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.LineStringZM">
            <summary>
            PolyLineZM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PolygonZM">
            <summary>
            PolygonZM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.MultiPointZM">
            <summary>
            MultiPointZM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PolygonZ">
            <summary>
            PolygonZ
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.MultiPointZ">
            <summary>
            MultiPointZ
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PointM">
            <summary>
            PointM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.LineStringM">
            <summary>
            LineStringM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.PolygonM">
            <summary>
            PolygonM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.MultiPointM">
            <summary>
            MultiPointM
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.ShapeGeometryType.MultiPatch">
            <summary>
            MultiPatch
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlFieldType">
            <summary>
            Represents a Sql field type.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.BigInt">
            <summary>
            A 64-bit signed integer.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Bit">
            <summary>
            An unsigned numeric value that can be 0 or 1. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Date">
            <summary>
            Date ranging from January 1, 0001 to December 31, 9999. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.DateTime">
            <summary>
            Date and time ranging from January 1, 1753 to December 31, 9999 to an accuracy of approximately 3.33 milliseconds. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Decimal">
            <summary>
            A fixed precision and scale numeric value between -10^38 + 1 and 10^38 - 1. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Geometry">
            <summary>
            A SQL Geometry type. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Int">
            <summary>
            A 32-bit signed integer. 
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.NVarChar">
            <summary>
            A variable-length stream of Unicode characters ranging between 1 and 4,000 characters.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.UniqueIdentifier">
            <summary>
            A globally unique identifier (or GUID).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.SmallInt">
            <summary>
            A 16-bit signed integer.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.SqlFieldType.Float">
            <summary>
            A 64-bit floating point number.
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlFieldDescriptor">
            <summary>
            Represents the information associated with a Sql field.
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlFieldDescriptor.#ctor(System.String,Gisvl.Framework.Spatial.SqlFieldType,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.SqlFieldDescriptor" /> class.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="fieldType">Type of the field.</param>
            <param name="isPrimary">if set to <c>true</c> if field is primary key.</param>
            <param name="length">The length of the field, in bytes.</param>
            <param name="decimals">The number of decimals in the field.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlFieldDescriptor.#ctor(Gisvl.Framework.Spatial.AttributeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.SqlFieldDescriptor" /> class.
            </summary>
            <param name="field">The field described as <see cref="T:Gisvl.Framework.Spatial.AttributeDescriptor"/>.</param>
            <remarks>
            Does not set primary keys!
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="field"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlFieldDescriptor.Name">
            <summary>
            Gets the field Name.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlFieldDescriptor.FieldType">
            <summary>
            Gets the Sql field type.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlFieldDescriptor.Length">
            <summary>
            Gets the length of the data.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlFieldDescriptor.DecimalCount">
            <summary>
            Gets the decimal count for the field, indicating where the decimal separator is.
            </summary>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlFieldDescriptor.IsPrimary">
            <summary>
            Indicates whether the field is a primary key.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlFieldDescriptor.GetSqlTypeString">
            <summary>
            Gets the field type in Sql.
            </summary>
            <returns>
            A string with the field type in Sql.
            </returns>
            <exception cref="T:System.NotSupportedException">The field type does not have a corresponding Sql type.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.SqlTableWriter">
             <summary>
             A class for writing a Sql Table to a SQL Server database.
             </summary>
             <example>
             <code language = "cs">
             var features = FeatureLoader.FromShape(System.IO.Path.Combine(inputMap, featureName)).Index();
            
             Feature f = features.FirstOrDefault&lt;Feature&gt;();
            
             SqlTableWriter tableWriter = new SqlTableWriter(connectionString, "RT", featureName, false, true, f);
            
             tableWriter.Fields.Single(ft => ft.Name == "UIDN").IsPrimary = true;
            
             int count = tableWriter.Write(features);
            
             using (SqlConnection connection = new SqlConnection(connectionString))
             {
                 connection.Open();
            
                 var newFields = from field in tableWriter.Fields
                                 where field.Name != "SHAPE"
                                 select field.Name;
            
                 var featureQuery = new FeatureQuery(connection, "RT." + featureName, newFields.ToArray()).WithGeometryColumn("SHAPE");
            
                 var featuresSql = featureQuery.AsEnumerable().Index();
             }
             </code>
             </example>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlTableWriter.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,Gisvl.Framework.Spatial.Feature)">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.SqlTableWriter" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="schema">The schema.</param>
            <param name="tableName">Name of the table.</param>
            <param name="append">If set to <c>true</c> an existing table should append new features, or should be dropped or truncated. If table does not exist, it will be created.</param>
            <param name="drop">If set to <c>true</c> an existing table will be dropped, otherwise truncated, if <paramref name="append"/> is set to <c>false</c>. If table does not exist, it will be created.</param>
            <param name="feature">The feature to get column information from.</param>
            <exception cref="T:System.ArgumentNullException">connectionString or tableName or feature is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">A <paramref name="feature"/> attribute has an unsupported type.</exception>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlTableWriter.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.SqlFieldDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:Gisvl.Framework.Spatial.SqlTableWriter" /> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="schema">The schema.</param>
            <param name="tableName">Name of the table.</param>
            <param name="append">If set to <c>true</c> an existing table should append new features, or should be dropped or truncated. If table does not exist, it will be created.</param>
            <param name="drop">If set to <c>true</c> an existing table will be dropped, otherwise truncated, if <paramref name="append"/> is set to <c>false</c>. If table does not exist, it will be created.</param>
            <param name="fields">The fields described with Sql field descriptors.</param>
            <exception cref="T:System.ArgumentNullException">connectionString
            or
            tableName
            or
            fields</exception>
        </member>
        <member name="P:Gisvl.Framework.Spatial.SqlTableWriter.Fields">
            <summary>
            Gets the list of sql field descriptors of the fields.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlTableWriter.Write(System.Collections.Generic.IEnumerable{Gisvl.Framework.Spatial.Feature})">
            <summary>
            Writes the specified feature collection.
            </summary>
            <param name="featureCollection">The feature collection.</param>
            <returns>Number of features written.</returns>
        </member>
        <member name="M:Gisvl.Framework.Spatial.SqlTableWriter.GetTypeFromSqlFieldType(Gisvl.Framework.Spatial.SqlFieldType)">
            <summary>
            Gets the CLR type for the given <paramref name="fieldType" />.
            </summary>
            <param name="fieldType">Field described as <see cref="T:Gisvl.Framework.Spatial.SqlFieldType"/>.</param>
            <returns>
            A CLR type.
            </returns>
            <exception cref="T:System.NotSupportedException"><paramref name="fieldType" /> does not have a corresponding DBase type.</exception>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Srid">
            <summary>
            Represents a spatial reference identifier.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Srid.None">
            <summary>
            An undefined spatial reference identifier.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Srid.Etrs89">
            <summary>
            The spatial reference identifier for ETRS 89 (4258).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Srid.Wgs84">
            <summary>
            The spatial reference identifier for WGS 84 (4326).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Srid.Lambert72">
            <summary>
            The spatial reference identifier for Lambert 72 (31370).
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Srid.WebMercator">
            <summary>
            The spatial reference identifier for WebMercator (3857).
            </summary>
        </member>
        <member name="T:Gisvl.Framework.Spatial.Tracing">
            <summary>
            Provides methods to write diagnostic messages to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/>.
            </summary>
            <summary>
            Provides methods to write diagnostic messages to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/>.
            </summary>
        </member>
        <member name="F:Gisvl.Framework.Spatial.Tracing.TraceSource">
            <summary>
            The TraceSource to write messages to.
            </summary>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceVerbose(System.String)">
            <summary>
            Writes a verbose message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified message.
            </summary>
            <param name="message">The verbose message to write.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information.
            </summary>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceVerboseIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information if a condition is true.
            </summary>
            <param name="condition"><c>true</c> to cause a message to be written, <c>false</c> otherwise.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information.
            </summary>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceInformationIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes an informational message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information if a condition is true.
            </summary>
            <param name="condition"><c>true</c> to cause a message to be written, <c>false</c> otherwise.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceWarning(System.String)">
            <summary>
            Writes a warning message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified message.
            </summary>
            <param name="message">The warning message to write.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information.
            </summary>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceWarningIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes a warning message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified object array and formatting information if a condition is true.
            </summary>
            <param name="condition"><c>true</c> to cause a message to be written, <c>false</c> otherwise.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace event to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified event type and argument array and format.
            </summary>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values that specifies the event type of the trace data.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceError(System.Int32,System.String,System.Object[])">
            <summary>
            Writes an error message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified error id, object array and formatting information.
            </summary>
            <param name="id">A numeric identifier for the error.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="M:Gisvl.Framework.Spatial.Tracing.TraceCriticalError(System.Int32,System.String,System.Object[])">
            <summary>
            Writes a critical message to the Gisvl.Framework.SqlServerGeometry <see cref="F:Gisvl.Framework.Spatial.Tracing.TraceSource"/> using the specified error id, object array and formatting information.
            </summary>
            <param name="id">A numeric identifier for the critical error.</param>
            <param name="format">A format string that contains zero or more format items that correspond to objects in the args array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
        </member>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an ACI color (Autocad Color Index) that also supports true color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGrey">
            <summary>
            Defines a default dark grey color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGrey">
            <summary>
            Defines a default light grey color.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Single,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for bylayer and byblock colors.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.UseTrueColor">
            <summary>
            Get or set if the AciColor should use true color values.
            </summary>
            <remarks>
            By default the constructors that use r, g, b values will set this boolean to true
            while the constants and constructor that use a short will set it to false.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for bylayer and byblock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (input values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (input values range from 0 to 1).</param>
            <returns>An <see cref="T:netDxf.AciColor">AciColor</see> that represents the acutal hsl value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hue">Hue (output values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (output values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.IndexRgb">
            <summary>
            Gets the complete list of indexed colors.
            </summary>
            <returns>A dictionary that contains the indexed colors, the key represents the color index and the value the rgb components of the color.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.AciColor.Equals(netDxf.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="obj">Another color to compare to.</param>
            <returns>True if the three components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
             <summary>
             Obtains a color index from the rgb components.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>This conversion will never be accurate.</remarks>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <remarks>Do not give names starting with * to block definitions, they are reserved for internal use.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Position">
            <summary>
            Gets or sets the block position in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Attributes">
            <summary>
            Gets or sets the block <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.EntityObject">entity</see> list that makes the block.
            </summary>
            <remarks>
            It is recommended to define the entities of a block in the default layer "0".<br />
            The UCS in effect when a block definition is created becomes the WCS for all entities in the block definition.
            The new origin for these entities is shifted to  match the base point defined for the block definition.
            All entity data is translated to fit this new WCS.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.TypeFlags">
            <summary>
            Gets or sets the block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Blocks.BlockEnd">
            <summary>
            Represents the termination element of the block definiton.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockEnd.#ctor(netDxf.Tables.Layer)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockEnd.Layer">
            <summary>
            Gets or sets the block end <see cref="T:netDxf.Tables.Layer">layer</see>.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockTypeFlags">
            <summary>
            Block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.None">
            <summary>
            Indicates none of the following flags apply.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.AnonymousBlock">
            <summary>
            This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.NonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions
            (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRef">
            <summary>
            This block is an external reference (xref).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRefOverlay">
            <summary>
            This block is an xref overlay.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ResolvedExternalReference">
            <summary>
            This is a resolved external reference, or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.DefinitionExternalReference">
            <summary>
            This definition is a referenced external reference (ignored on input).
            </summary>
        </member>
        <member name="T:netDxf.CodeValuePair">
            <summary>
            Represents the minimun information element in a dxf file.
            </summary>
        </member>
        <member name="M:netDxf.CodeValuePair.#ctor(netDxf.DataCode,System.String)">
            <summary>
            Initalizes a new instance of the <c>CodeValuePair</c> class.
            </summary>
            <param name="code">Dxf code.</param>
            <param name="value">Value for the specified code.</param>
        </member>
        <member name="P:netDxf.CodeValuePair.Code">
            <summary>
            Gets the dxf code.
            </summary>
        </member>
        <member name="P:netDxf.CodeValuePair.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all dxf objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
            <param name="codeName">Object name.</param>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the dxf entity type string.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets or sets the handle asigned to the dxf object.
            </summary>
            <remarks>It is a unique hexadecimal number asigned automatically to every dxf object. Only the getter is public.</remarks>
        </member>
        <member name="M:netDxf.DxfObject.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.DxfObject.ToString">
            <summary>
            Obtains a string that represents the dxf object.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            Dxf entities codes (code 0).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewPort">
            <summary>
            Viewport.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyle">
            <summary>
            MLine style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            Ucs.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LightWeightPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MText">
            <summary>
            Multiline text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLine">
            <summary>
            MLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3d">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Image">
            <summary>
            Raster image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDef">
            <summary>
            Image definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefReactor">
            <summary>
            Image definition reactor.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.RasterVariables">
            <summary>
            Raster variables.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Group">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="T:netDxf.DxfReader">
            <summary>
            Low level dxf reader
            </summary>
        </member>
        <member name="M:netDxf.DxfReader.ReadTemplate(System.IO.Stream)">
            <summary>
            Reads the whole stream.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:netDxf.DxfReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:netDxf.DxfReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:netDxf.DxfWriter">
            <summary>
            Low level dxf writer.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.ActiveSection">
            <summary>
            Gets the active section.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.Version">
            <summary>
            Gets the dxf file version.
            </summary>
        </member>
        <member name="P:netDxf.DxfWriter.FileSize">
            <summary>
            Gets the filesize of current dxf stream.
            </summary>
            <returns>Filesize in bytes.</returns>
        </member>
        <member name="M:netDxf.DxfWriter.Dispose">
            <summary>
            Closes the dxf file.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginSection(System.String)">
            <summary>
            Opens a new section.
            </summary>
            <param name="section">Section type to open.</param>
            <remarks>There can be only one type section.</remarks>
        </member>
        <member name="M:netDxf.DxfWriter.EndSection">
            <summary>
            Closes the active section.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.BeginTable(System.String,System.String)">
            <summary>
            Opens a new table.
            </summary>
            <param name="table">Table type to open.</param>
            <param name="handle">Handle assigned to this table</param>
        </member>
        <member name="M:netDxf.DxfWriter.EndTable">
            <summary>
            Closes the active table.
            </summary>
        </member>
        <member name="M:netDxf.DxfWriter.RegisterApplication(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Writes a new extended data application registry to the table section.
            </summary>
            <param name="appReg">Name of the application registry.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteViewPort(netDxf.Tables.ViewPort)">
            <summary>
            Writes a new view port to the table section.
            </summary>
            <param name="vp">Viewport.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Writes a new dimension style to the table section.
            </summary>
            <param name="style">DimensionStyle.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteBlockRecord(netDxf.Tables.BlockRecord)">
            <summary>
            Writes a new block record to the table section.
            </summary>
            <param name="blockRecord">Block.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLineType(netDxf.Tables.LineType)">
            <summary>
            Writes a new line type to the table section.
            </summary>
            <param name="tl">Line type.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteLayer(netDxf.Tables.Layer)">
            <summary>
            Writes a new layer to the table section.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:netDxf.DxfWriter.WriteTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Writes a new text style to the table section.
            </summary>
            <param name="style">TextStyle.</param>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Normal">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents a attribute <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>The attribute position and orientation are expressed in local coordinates of the <see cref="T:netDxf.Entities.Insert">Insert</see> entity to which it belongs.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
            <remarks>
            Althought the attribute entity could override values defined in its definiton for simplicity the implementation has restricted this posibility.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition,System.Object)">
            <summary>
            Intitializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Normal">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Visible">
            <summary>
            Attribute is visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents a attribute definition <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Intitializes a new instance of the <c>AttributeDefiniton</c> class.
            </summary>
            <param name="id">Attribute identifier, the parameter <c>id</c> string cannot contain spaces.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Id">
            <summary>
            Gets the attribute identifier.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Text">
            <summary>
            Gets or sets the attribute information text.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the attribute text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the attribute text width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Normal">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Normal">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
            <remarks>
            The normal will always be normalized.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:Gisvl.Framework.Spatial.GeoVector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector2">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>ellipse</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:Gisvl.Framework.Spatial.GeoVector3">center</see>.
            </summary>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation along its normal.
            </summary>
            <remarks>The angle is measured in degrees.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks><c>StartAngle</c> equals 0 and <c>EndAngle</c> equals 360 for a full ellipse.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Normal">
            <summary>
            Gets or sets the ellipse <see cref="T:Gisvl.Framework.Spatial.GeoVector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the the actual instance is a full ellipse.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EndSequence.Layer">
            <summary>
            Gets or sets the end sequence <see cref="T:netDxf.Tables.Layer">layer</see>
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline">
            <summary>
            3d polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.LightWeightPolyline">
            <summary>
            Lightweight polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MText">
            <summary>
            Multiline text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MLine">
            <summary>
            Multiline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Attribute">
            <summary>
            Attribute entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.AttributeDefinition">
            <summary>
            Attribute definition entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Image">
            <summary>
            A raster image entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LineType">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LineTypeScale">
            <summary>
            Gets or sets the entity linetype scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Position">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Normal">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="endPoint">Line end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Normal">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.LwPolyline">
            <summary>
            Represents a light weight polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Light weight polylines are bidimensional polylines that can hold information about the width of the lines and arcs that compose them.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.List{netDxf.Entities.LwPolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Vertexes">
            <summary>
            Gets or sets the light weight polyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.IsClosed">
            <summary>
            Gets or sets if the light weight polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Normal">
            <summary>
            Gets or sets the light weight polyline <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Thickness">
            <summary>
            Gets or sets the light weight polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Elevation">
            <summary>
            Gets or sets the light weight polyline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Flags">
            <summary>
            Gets the light weight polyline type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <remarks>
            Makes the opposite function as the Join() method.
            </remarks>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see>see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.ToCoordinates(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="bulgePrecision">Curve segments precision, expressed as the number of segments in a full circle (a value of zero means that no approximation will be made).</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimun distance from which approximate curved segments of the polyline.</param>
            <returns>A list of vertexes expresed in object coordinate system.</returns>
        </member>
        <member name="T:netDxf.Entities.LwPolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.LwPolyline">LwPolyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="location">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="bulge">Vertex bulge.</param>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Location">
            <summary>
            Gets or sets the light weight polyline vertex <see cref="T:netDxf.Vector2">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.BeginWidth">
            <summary>
            Gets or sets the light weight polyline begin width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment,
            made negative if the arc goes clockwise from the start point to the endpoint.
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Point">
            <summary>
            Represents a point <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="location">Point <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="location">Point <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Location">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Thickness">
            <summary>
            Gets or sets the point thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Normal">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Rotation">
            <summary>
            Gets or sets the point local rotation along its normal.
            </summary>
            <remarks>The angle is measured in degrees.</remarks>
        </member>
        <member name="T:netDxf.Entities.Polyline">
            <summary>
            Represents a generic polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.List{netDxf.Entities.PolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Vertexes">
            <summary>
            Gets or sets the polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.IsClosed">
            <summary>
            Gets or sets if the light weight polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.SmoothType">
            <summary>
            Gets the curve smooth type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.EndSequence">
            <summary>
            Gets the end vertex sequence.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.AsignHandle(System.Int32)">
            <summary>
            Asigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to asign.</param>
            <returns>Next avaliable entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will asign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.PolylineSmoothType">
            <summary>
            Defines the curves type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.NoSmooth">
            <summary>
            No smooth curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Quadratic">
            <summary>
            Quadratic B-spline curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Cubic">
            <summary>
            Cubic B-spline curve.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineTypeFlags">
            <summary>
            Defines the polyline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.OpenPolyline">
            <summary>
            Default, open polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM">
            <summary>
            This is a closed polyline (or a polygon mesh closed in the M direction).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.CurveFit">
            <summary>
            Curve-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.SplineFit">
            <summary>
            Spline-fit vertices have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.Polyline3D">
            <summary>
            This is a 3D polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolygonMesh">
            <summary>
            This is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolygonMeshInN">
            <summary>
            The polygon mesh is closed in the N direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolyfaceMesh">
            <summary>
            The polyline is a polyface mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ContinuousLineTypePattern">
            <summary>
            The linetype pattern is generated continuously around the vertices of this polyline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Polyline">polyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyline <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Location">
            <summary>
            Gets or sets the vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Entities.Text">
            <summary>
            Represents a Text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Text.Rotation">
            <summary>
            Gets or sets the text rotation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Position">
            <summary>
            Gets or sets Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Normal">
            <summary>
            Gets or sets the text <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Value">
            <summary>
            Gets or sets the text string.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Vertex">
            <summary>
            Represents a dxf Vertex.
            </summary>
            <remarks>
            The Vertex class holds all the information read from the dxf file even if its needed or not.
            For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Location">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.BeginThickness">
            <summary>
            Gets or sets the light weight polyline begin thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.EndThickness">
            <summary>
            Gets or sets the light weight polyline end thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.Accepted values range from 0 to 1.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment,
            made negative if the arc goes clockwise from the start point to the endpoint.
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Vertex.Flags">
            <summary>
            Gets or sets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Layer">
            <summary>
            Gets or sets the entity layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.LineType">
            <summary>
            Gets or sets the entity line type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.VertexTypeFlags">
            <summary>
            Defines the vertex type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolylineVertex">
            <summary>
            2d polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFittingExtraVertex">
            <summary>
            Extra vertex created by curve-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFitTangent">
            <summary>
            Curve-fit tangent defined for this vertex.
            A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.NotUsed">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineVertexFromSplineFitting">
            <summary>
            Spline vertex created by spline-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline3dVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polygon3dMesh">
            <summary>
            3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex.
            </summary>
        </member>
        <member name="T:netDxf.Header.AttMode">
            <summary>
            Defines the attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:netDxf.Header.DefaultDrawingUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Unitless">
            <summary>
            Unitless.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Microinches">
            <summary>
            Microinches.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Mils">
            <summary>
            Mils.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Angstroms">
            <summary>
            Angstroms.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Nanometers">
            <summary>
            Nanometers.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Microns">
            <summary>
            Microns.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Decimeters">
            <summary>
            Decimeters.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Decameters">
            <summary>
            Decameters
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Hectometers">
            <summary>
            Hectometers.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Gigameters">
            <summary>
            Gigameters.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.AstronomicalUnits">
            <summary>
            AstronomicalUnits.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.LightYears">
            <summary>
            LightYears.
            </summary>
        </member>
        <member name="F:netDxf.Header.DefaultDrawingUnits.Parsecs">
            <summary>
            Parsecs.
            </summary>
        </member>
        <member name="T:netDxf.Header.DxfVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.Unknown">
            <summary>
            Unknown AutoCAD DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad10">
            <summary>
            AutoCAD R10 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad12">
            <summary>
            AutoCAD R11 and R12 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad13">
            <summary>
            AutoCAD R13 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad14">
            <summary>
            AutoCAD R14 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2000">
            <summary>
            AutoCAD 2000 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2004">
            <summary>
            AutoCAD 2004 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2007">
            <summary>
            AutoCAD 2007 DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2010">
            <summary>
            AutoCAD 2010 DXF file.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariable">
            <summary>
            Defines a header variable.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariableCode">
            <summary>
            Strings system variables
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AttMode">
            <summary>
            Attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUnits">
            <summary>
            Units format for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUprec">
            <summary>
            Units precision for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeColor">
            <summary>
            Current entity color.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtScale">
            <summary>
            Current entity linetype scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtype">
            <summary>
            Current entity linetype name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CLayer">
            <summary>
            Current layer name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLStyle">
            <summary>
            Current multiline style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DimStyle">
            <summary>
            Current dimension style name
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextSize">
            <summary>
            Default text height.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextStyle">
            <summary>
            Current text style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length,
            and can include the letters A to Z, the numerals 0 to 9, spaces,
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Insunits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            Also applies to raster image units, eventhought they have the RasterVariables object and units in ImageDef.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            0 = Lineweight is not displayed
            1 = Lineweight is displayed
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LtScale">
            <summary>
            Global linetype scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size.<br />
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PLineGen">
            <summary>
            Governs the generation of linetype patterns around the vertices of a 2D polyline.
            </summary>
            <remarks>
            1 = Linetype is generated in a continuous pattern around vertices of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="T:netDxf.Header.HeaderVariables">
            <summary>
            Represents the header variables of a dxf document.
            </summary>
            <remarks>
            The names of header variables are the same as they appear in the official dxf documentation but without the $,
            check it in case of doubt on what they represent.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>SystemVariables</c>.
            </summary>
            <remarks>The default values are the same ones that are apply to a new AutoCad drawing.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
            <remarks>Only AutoCad2000 and higher dxf versions are supported.</remarks>
            <exception cref="T:System.NotSupportedException">Only AutoCad2000 and higher dxf versions are supported.</exception>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AttMode">
            <summary>
            Attribute visibility.
            </summary>
            <remarks>Default value: AttMode.Normal.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUnits">
            <summary>
            Units format for angles.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUprec">
            <summary>
            Units precision for angles.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeColor">
            <summary>
            Current entity color.
            </summary>
            <remarks>Default value: 256 (ByLayer). This header variable only supports indexed colors.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtScale">
            <summary>
            Current entity linetype scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
            <remarks>Default value: -1 (ByLayer).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtype">
            <summary>
            Current entity linetype name.
            </summary>
            <remarks>Default value: ByLayer.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CLayer">
            <summary>
            Current layer name.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
            <remarks>Default value: 20.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLStyle">
            <summary>
            Current multiline style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DimStyle">
            <summary>
            Current dimension style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextSize">
            <summary>
            Default text height.
            </summary>
            <remarks>Default value: 2.5.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextStyle">
            <summary>
            Current text style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
            <remarks>Default value: 2.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
            <remarks>Default value: 4.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Default value: 1.<br />
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length,
            and can include the letters A to Z, the numerals 0 to 9, spaces,
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Insunits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            Default value: 0.<br />
            Also applies to raster image units, eventhought they have the RasterVariables object and units in ImageDef.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
            <remarks>
            By default it uses the user name of the person who is currently logged on to the Windows operating system.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LtScale">
            <summary>
            Global linetype scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            Default value: false.<br />
            false = Lineweight is not displayed.<br />
            true = Lineweight is displayed.<br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
            <remarks>Default value: PointShape.Dot.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            Default value: 0.<br />
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size. <br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PLineGen">
            <summary>
            Governs the generation of linetype patterns around the vertices of a 2D polyline.
            </summary>
            <remarks>
            Default value: 0.<br />
            1 = Linetype is generated in a continuous pattern around vertices of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="T:netDxf.Header.PointShape">
            <summary>
            Defines the shape of the point entities.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Dot">
            <summary>
            A dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Empty">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Cross">
            <summary>
            Cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Line">
            <summary>
            A line going upwards.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleDot">
            <summary>
            A circle and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleEmpty">
            <summary>
            Only a circle shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CirclePlus">
            <summary>
            A circle and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleCross">
            <summary>
            A circle and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleLine">
            <summary>
            A circle and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareDot">
            <summary>
            A square and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareEmpty">
            <summary>
            Only a square shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquarePlus">
            <summary>
            A square and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareCross">
            <summary>
            A square and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareLine">
            <summary>
            A square and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareDot">
            <summary>
            A circle, a square, and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareEmpty">
            <summary>
            A circle and a square.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquarePlus">
            <summary>
            A circle, a square, and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareCross">
            <summary>
            A circle, a square, and a cros sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareLine">
            <summary>
            A circle, a square, and a line.
            </summary>
        </member>
        <member name="T:netDxf.Lineweight">
            <summary>
            Represents the lineweight of a layer or an entity.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.ByLayer">
            <summary>
            Gets the ByLayer lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.ByBlock">
            <summary>
            Gets the ByBlock lineweight.
            </summary>
        </member>
        <member name="P:netDxf.Lineweight.Default">
            <summary>
            Gets the Default lineweight.
            </summary>
        </member>
        <member name="M:netDxf.Lineweight.#ctor">
            <summary>
            Initializes a new instance of the <c>Lineweight</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Lineweight.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>Lineweight</c> class.
            </summary>
            <param name="weight">Lineweight value range from 0 to 200.</param>
            <remarks>
            Accepted lineweight values range from 0 to 200, the reserved values - 1, -2, and -3 represents ByLayer, ByBlock, and Default lineweights.
            </remarks>
        </member>
        <member name="P:netDxf.Lineweight.Value">
            <summary>
            Gets or sets the line weight value range from 0 to 200, one unit is always 1/100 mm.
            </summary>
            <remarks>
            Accepted lineweight values range from 0 to 200, the reserved values - 1, -2, and -3 represents ByLayer, ByBlock, and Default lineweights.
            </remarks>
        </member>
        <member name="M:netDxf.Lineweight.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Lineweight.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.Epsilon">
            <summary>
            Represents the smallest number.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.HalfPI">
            <summary>
            PI/2 (90 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.PI">
            <summary>
            PI (180 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.TwoPI">
            <summary>
            2*PI (360 degrees)
            </summary>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double,System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.TransformFromObjectToWorld(netDxf.Vector2,System.Double)">
            <summary>
            Transforms a point from object to world coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <returns>Transormed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.TransformFromWorldToObject(netDxf.Vector2,System.Double)">
            <summary>
            Transforms a point from world to object coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <returns>Transormed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.TransformFormObjectToWorld(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Transforms a point from object to world coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="normal">Object normal vector.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.TransformFromWorldToObject(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Transforms a point from world to object coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="normal">Object normal vector.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArbitraryAxis(netDxf.Vector3)">
            <summary>
            Gets the rotation matrix from the normal vector (extrusion direction) of an entity.
            </summary>
            <param name="normal">Normal vector.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="q">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2@)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <param name="intersection">Intersection point of the two lines.</param>
            <returns>0 if there is an intersection point, 1 if the lines are parallel or 2 if the lines are the same.</returns>
        </member>
        <member name="T:netDxf.Matrix3">
            <summary>
            Represents a 3x3 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix3.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,2].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
        </member>
        <member name="P:netDxf.Matrix3.Identity">
            <summary>
            Getx the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.op_Addition(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Subtraction(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix substraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3d.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determiant.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Objects.ClonningFlag">
            <summary>
            Duplicate record cloning flag (determines how to merge duplicate entries).
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Entries">
            <summary>
            Gets the entries dictionary (key: owner entry handle, value: name)
            </summary>
        </member>
        <member name="T:netDxf.Objects.Group">
            <summary>
            Represents a group of entities.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String)">
            <summary>
            Initialized a new empty group.
            </summary>
            <param name="name">Group name (optional).</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when it is added to the document.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Name">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsUnnamed">
            <summary>
            Get if the group has an automatic generated name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsSelectable">
            <summary>
            Gets or sets if the group is selectable.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Entities">
            <summary>
            Gets or sets the list of entities contained in the group.
            </summary>
            <remarks>
            When the group is added to the document the entities in it will be automatically added too.<br/>
            An entity may be contained in different groups.<br/>
            If the entities list is modified after it has been added to the document the entities will have to be added manually.
            </remarks>
        </member>
        <member name="T:netDxf.StringCode">
            <summary>
            Dxf sections.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.HeaderSection">
            <summary>
            header.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ClassesSection">
            <summary>
            classes.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Class">
            <summary>
            class.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TablesSection">
            <summary>
            tables.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlocksSection">
            <summary>
            blocks.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EntitiesSection">
            <summary>
            entities.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ObjectsSection">
            <summary>
            objects.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginSection">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSection">
            <summary>
            end secction code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LayerTable">
            <summary>
            layers.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewPortTable">
            <summary>
            view ports.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ViewTable">
            <summary>
            views.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.UcsTable">
            <summary>
            ucs.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BlockRecordTable">
            <summary>
            block records.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.LineTypeTable">
            <summary>
            line types.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.TextStyleTable">
            <summary>
            text styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.DimensionStyleTable">
            <summary>
            dim styles.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.ApplicationIDTable">
            <summary>
            extended data application registry.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndTable">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Table">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.BeginBlock">
            <summary>
            dxf name string.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndBlock">
            <summary>
            end table code.
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndSequence">
            <summary>
            end of an element sequence
            </summary>
        </member>
        <member name="F:netDxf.StringCode.Dictionary">
            <summary>
            dictionary
            </summary>
        </member>
        <member name="F:netDxf.StringCode.EndOfFile">
            <summary>
            end of file
            </summary>
        </member>
        <member name="T:netDxf.SubclassMarker">
            <summary>
            Dxf object subclass string markers (code 100).
            </summary>
        </member>
        <member name="T:netDxf.Symbols">
            <summary>
            Symbols for dxf text strings.
            </summary>
            <remarks>
            These special strings translates to symbols in AutoCad.
            </remarks>
        </member>
        <member name="F:netDxf.Symbols.Diameter">
            <summary>
            Text string that shows as a diameter 'Ø' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.Degree">
            <summary>
            Text string that shows as a degree '°' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.PlusMinus">
            <summary>
            Text string that shows as a plus-minus '±' character.
            </summary>
        </member>
        <member name="T:netDxf.Tables.ApplicationRegistry">
            <summary>
            Represents a registered application name to which the XData extended data is associated.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApplicationRegistry</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Default">
            <summary>
            Gets the default application registry.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Determines whether the specified <see cref="T:netDxf.Tables.ApplicationRegistry" /> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry" />.
            </summary>
            <returns>
            True if the specified <see cref="T:netDxf.Tables.ApplicationRegistry" /> is equal to the current <see cref="T:netDxf.Tables.ApplicationRegistry" />; otherwise, false.
            </returns>
            <remarks>Two <see cref="T:netDxf.Tables.ApplicationRegistry" /> instances are equal if their names are equal.</remarks>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            True if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj"> The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.GetHashCode">
            <summary>
             Serves as a hash function for a particular type.
            </summary>
            <returns>
             A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:netDxf.Tables.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="T:netDxf.Tables.DimensionStyle">
            <summary>
            Represents as dimension style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DimensionStyle</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextStyle">
            <summary>
            Gets or sets the text style of the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMGAP">
            <summary>
            Sets the distance around the dimension text when the dimension line breaks to accommodate dimension text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMEXO">
            <summary>
            Specifies how far extension lines are offset from origin points.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMEXE">
            <summary>
            Specifies how far to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMASZ">
            <summary>
            Controls the size of dimension line and leader line arrowheads. Also controls the size of hook lines.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTXT">
            <summary>
            Specifies the height of dimension text, unless the current text style has a fixed height.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMJUST">
            <summary>
            Controls the horizontal positioning of dimension text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTAD">
            <summary>
            Controls the vertical position of text in relation to the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMDEC">
            <summary>
            Sets the number of decimal places displayed for the primary units of a dimension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMCEN">
            <summary>
            Controls drawing of circle or arc center marks and centerlines.
            </summary>
            <remarks>
            0 - No center marks or lines are drawn.<br />
            greater than 0 - Centerlines are drawn.<br />
            lower than 0 - Center marks are drawn.<br />
            The absolute value specifies the size of the center mark or centerline.
            The size of the centerline is the length of the centerline segment that extends outside the circle or arc.
            It is also the size of the gap between the center mark and the start of the centerline.
            The size of the center mark is the distance from the center of the circle or arc to the end of the center mark.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMADEC">
            <summary>
            Controls the number of precision places displayed in angular dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMPOST">
            <summary>
            Specifies a text prefix or suffix (or both) to the dimension measurement.
            </summary>
            <remarks>
            Use "&lt;&gt;" to indicate placement of the text in relation to the dimension value.
            For example, enter "&lt;&gt;mm" to display a 5.0 millimeter radial dimension as "5.0mm".
            If you entered "mm &lt;&gt;", the dimension would be displayed as "mm 5.0".
            Use the "&lt;&gt;" mechanism for angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTIH">
            <summary>
            Controls the position of dimension text inside the extension lines for all dimension types except Ordinate.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMTOH">
            <summary>
            Controls the position of dimension text outside the extension lines.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMDSEP">
            <summary>
            Specifies a single-character decimal separator to use when creating dimensions whose unit format is decimal.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DIMAUNIT">
            <summary>
            Gets the units format for angular dimensions.
            </summary>
            <remarks>
            0 Decimal degrees
            1 Degrees/minutes/seconds
            2 Gradians
            3 Radians
            </remarks>
        </member>
        <member name="T:netDxf.Tables.Layer">
            <summary>
            Represents a layer.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.Layer.Default">
            <summary>
            Gets the default Layer 0.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.LineType">
            <summary>
            Gets or sets the layer <see cref="P:netDxf.Tables.Layer.LineType">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Color">
            <summary>
            Gets or sets the layer <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsVisible">
            <summary>
            Gets or sets the layer visibility.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Plot">
            <summary>
            Gets or sets if the plotting flag.
            </summary>
            <remarks>If set to false, do not plot this layer.</remarks>
        </member>
        <member name="P:netDxf.Tables.Layer.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = Default).
            </summary>
        </member>
        <member name="T:netDxf.Tables.LineType">
            <summary>
            Represents a line type.
            </summary>
            <remarks>
            Only simple line types are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LineType.ByLayer">
            <summary>
            Gets the ByLayer line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.ByBlock">
            <summary>
            Gets the ByBlock line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Continuous">
            <summary>
            Gets a predefined continuous line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Center">
            <summary>
            Gets a predefined center line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.DashDot">
            <summary>
            Gets a predefined dash dot line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dashed">
            <summary>
            Gets a predefined dashed line
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Dot">
            <summary>
            Gets a predefined dot line
            </summary>
        </member>
        <member name="M:netDxf.Tables.LineType.#ctor(System.String,System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes a new instance of the <c>LineType</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description (optional).</param>
            <param name="segments">The segments.</param>
        </member>
        <member name="P:netDxf.Tables.LineType.Description">
            <summary>
            Gets or sets the line type description (optional).
            </summary>
        </member>
        <member name="P:netDxf.Tables.LineType.Segments">
            <summary>
            Gets or stes the list of line type segments.
            </summary>
            <remarks>
            A positive decimal number denotes a pen-down (dash) segment of that length.
            A negative decimal number denotes a pen-up (space) segment of that length.
            A dash length of 0 draws a dot.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LineType.Length">
            <summary>
            Gets the total length of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LineType.FromFile(System.String,System.String)">
            <summary>
            Creates a new line type from the definition in a lin file.
            </summary>
            <remarks>Only simple line types are supported.</remarks>
            <param name="file">Lin file where the definition is located.</param>
            <param name="lineTypeName">Name of the line type definition that wants to be read (ignore case).</param>
            <returns>A line type defined by the lin file.</returns>
        </member>
        <member name="T:netDxf.Tables.TableObject">
            <summary>
            Defines classes that can be accesed by name. They are usually part of the dxf table section but can also be part of the objects section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TableObject</c> class.
            </summary>
            <param name="name">Table name.</param>
            <param name="codeName">Table <see cref="T:netDxf.DxfObjectCode">code name</see>.</param>
            <remarks>Do not give names starting with * to table objects, they are reserved for internal use.</remarks>
        </member>
        <member name="P:netDxf.Tables.TableObject.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case unsensitive.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Tables.TextStyle">
            <summary>
            Represents a text style.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class. The font file name, without the extension, will be used as the TextStyle name.
            </summary>
            <param name="font">Text style font file name.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name.</param>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontName">
            <summary>
            Gets the text style font file name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontNameWithoutExtension">
            <summary>
            Gets the style font file name without the extension.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Fixed text height; 0 if not fixed.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>Valid values range from 0.01 to 100. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsVertical">
            <summary>
            Gets or sets the text is vertical.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Tables.View.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ViewPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ViewPort</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Vector2">
            <summary>
            Represent a two component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="P:netDxf.Vector2.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Perpendicular(netDxf.Vector2)">
            <summary>
            Obtains the counter clockwise perpendicular vector .
            </summary>
            <param name="u">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Obtains a the polar point of another point.
            </summary>
            <param name="u">Reference point.</param>
            <param name="distance">Distance from point u.</param>
            <param name="angle">Angle in radians.</param>
            <returns></returns>
        </member>
        <member name="M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2)">
            <summary>
            Obtains the angle of a vector.
            </summary>
            <param name="u">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle of a line defined by two points.
            </summary>
            <param name="u">A Vector2.</param>
            <param name="v">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(System.Double,netDxf.Vector2)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="obj">Another Vector2 to compare to.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector3">
            <summary>
            Represent a three component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="P:netDxf.Vector3.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.DotProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector3.CrossProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.Distance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Distancie.</returns>
        </member>
        <member name="M:netDxf.Vector3.SquareDistance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.AngleBetween(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector3.MidPoint(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are penpendicular or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Equality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Inequality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are different or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Addition(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Subtraction(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Substracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The substraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_UnaryNegation(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multuplies a vector with an scalar (same as a*u, conmutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multuplies an scalar with a vector (same as u*a, conmutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,System.Double)">
            <summary>
            Divides a vector with an scalar (not same as a/v).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(System.Double,netDxf.Vector3)">
            <summary>
            Divides an scalar with a vector (not same as v/a).
            </summary>
            <param name="a">Vector3.</param>
            <param name="u">Scalar.</param>
            <returns>The multiplication of a times u.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <exception cref="T:System.ArithmeticException"></exception>
        </member>
        <member name="M:netDxf.Vector3.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="obj">Vector3.</param>
            <param name="threshold">Maximun tolerance.</param>
            <returns>True if the three components are almost equal or false in anyother case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DataCode">
            <summary>
            Defines the data code, including extended data codes.
            </summary>
        </member>
        <member name="F:netDxf.DataCode.String">
            <summary>
            Strings in extended data can be up to 255 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.DataCode.AppReg">
            <summary>
            Application names can be up to 31 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.DataCode.ControlString">
            <summary>
            An extended data control string can be either “{”or “}”.
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested
            </summary>
        </member>
        <member name="F:netDxf.DataCode.LayerName">
            <summary>
            Name of the layer associated with the extended data
            </summary>
        </member>
        <member name="F:netDxf.DataCode.BinaryData">
            <summary>
            Binary data is organized into variable-length chunks.
            The maximum length of each chunk is 127 bytes.
            In ASCII DXF files, binary data is represented as a string of hexadecimal digits, two per binary byte
            </summary>
        </member>
        <member name="F:netDxf.DataCode.DatabaseHandle">
            <summary>
            Handles of entities in the drawing database
            </summary>
        </member>
        <member name="F:netDxf.DataCode.RealX">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.DataCode.RealY">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.DataCode.RealZ">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpacePositionX">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored
            along with the parent entity to which the extended data belongs.
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpacePositionY">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored
            along with the parent entity to which the extended data belongs.
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpacePositionZ">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored
            along with the parent entity to which the extended data belongs.
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpaceDisplacementX">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpaceDisplacementY">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldSpaceDisplacementZ">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldDirectionX">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldDirectionY">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.WorldDirectionZ">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.Real">
            <summary>
            A real value.
            </summary>
        </member>
        <member name="F:netDxf.DataCode.Distance">
            <summary>
            A real value that is scaled along with the parent entity
            </summary>
        </member>
        <member name="F:netDxf.DataCode.ScaleFactor">
            <summary>
            Also a real value that is scaled along with the parent.
            The difference between a distance and a scale factor is application-defined
            </summary>
        </member>
        <member name="F:netDxf.DataCode.Integer">
            <summary>
            A 16-bit integer (signed or unsigned)
            </summary>
        </member>
        <member name="F:netDxf.DataCode.Long">
            <summary>
            A 32-bit signed (long) integer
            </summary>
        </member>
        <member name="T:SqlServerTypes.Utilities">
            <summary>
            Utility methods related to CLR Types for SQL Server 
            </summary>
        </member>
        <member name="M:SqlServerTypes.Utilities.LoadNativeAssemblies(System.String)">
            <summary>
            Loads the required native assemblies for the current architecture (x86 or x64)
            </summary>
            <param name="rootApplicationPath">
            Root path of the current application. Use Server.MapPath(".") for ASP.NET applications
            and AppDomain.CurrentDomain.BaseDirectory for desktop applications.
            </param>
        </member>
    </members>
</doc>
